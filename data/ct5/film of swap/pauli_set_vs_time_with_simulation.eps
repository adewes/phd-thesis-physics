%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: pauli_set_vs_time_with_simulation.pdf
%%Creator: Adobe Acrobat 9.3.0
%%For: Heisenberg
%%CreationDate: 22.03.2012, 16:15:03
%%BoundingBox: 0 0 929 494
%%HiResBoundingBox: 0 0 928.3871 493.2771
%%CropBox: 0 0 928.3871 493.2771
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 31829 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:08:04        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
   xmp:CreateDate="2011-02-13T03:18:16+02:00"
   xmp:CreatorTool="matplotlib 0.99.1, http://matplotlib.sf.net"
   xmp:ModifyDate="2012-03-22T16:12:21+01:00"
   xmp:MetadataDate="2012-03-22T16:12:21+01:00"
   pdf:Producer="matplotlib pdf backend"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:f1f85a41-045f-4d6e-8a69-a53d62c9a763"
   xmpMM:InstanceID="uuid:534057cf-bb47-4b6c-ae97-35a71d3ec204"
   xmpMM:RenditionClass="proof:pdf"
   xmpTPg:NPages="1"
   xmpTPg:HasVisibleTransparency="False"
   xmpTPg:HasVisibleOverprint="False">
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="136"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAiAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A6hrf5twh7qO8sop9Js57&#xA;ia448/Wa101kfksUoVDJJKrBELUKLzqKgG7TaeWbJHHH6pkAfFUj/wChnvyf/wCrNf8A/SHa/wDV&#xA;bOt/0C63+dj+cv8AiVuH84fb+p3/AEM9+T//AFZr/wD6Q7X/AKrY/wCgXW/zsfzl/wAStw/nD7f1&#xA;O/6Ge/J//qzX/wD0h2v/AFWx/wBAut/nY/nL/iVuH84fb+p3/Qz35P8A/Vmv/wDpDtf+q2P+gXW/&#xA;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&#xA;kH1q73jWgVf73YKg9NadE+AfB8OKv//Z"/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpTPg:MaxPageSize
    stDim:w="327.514204"
    stDim:h="174.017285"
    stDim:unit="Millimeters"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li
      xmpG:groupName="Default Swatch Group"
      xmpG:groupType="0"/>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -493.277 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 493.277 li
928.387 493.277 li
928.387 0 li
cp
clp
[1 0 0 1 0 0 ]ct
25.025 453.38 mo
913.639 453.38 li
913.639 .5 li
25.025 .5 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
25.0254 433.689 mo
27.9874 430.351 li
30.9494 428.319 li
33.9114 427.214 li
36.8734 426.909 li
42.7974 427.694 li
63.5314 432.226 li
72.4184 434.537 li
81.3044 437.026 li
90.1904 438.522 li
105 440.067 li
110.924 439.914 li
119.81 438.774 li
149.431 432.785 li
158.317 430.369 li
164.241 429.386 li
182.013 427.793 li
187.938 427.892 li
199.786 428.936 li
208.672 430.332 li
223.482 432.962 li
238.293 434.882 li
247.178 435.251 li
276.799 434.313 li
315.306 429.253 li
336.04 428.575 li
341.964 428.539 li
350.85 429.363 li
374.546 431.96 li
401.205 433.847 li
430.826 433.179 li
442.674 431.793 li
454.522 430.608 li
475.256 429.608 li
498.953 429.355 li
510.801 430.024 li
522.649 430.466 li
540.421 431.793 li
555.232 431.817 li
567.08 432.349 li
578.928 431.985 li
635.208 429.584 li
655.941 429.262 li
670.752 429.639 li
685.562 429.841 li
706.296 430.553 li
753.689 430.672 li
771.462 430.215 li
792.196 429.664 li
854.399 429.575 li
866.247 429.956 li
910.677 429.924 li
910.677 433.689 li
cp
/1 
[/DeviceCMYK] /CSA add_res
3.0518e-5 1 1 3.0518e-5 cmyk
f
gsave
25.025 453.379 mo
913.639 453.379 li
913.639 .5 li
25.025 .5 li
cp
clp
1 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
25.0254 433.689 mo
27.9874 430.351 li
30.9494 428.319 li
33.9114 427.214 li
36.8734 426.909 li
42.7974 427.694 li
63.5314 432.226 li
72.4184 434.537 li
81.3044 437.026 li
90.1904 438.522 li
105 440.067 li
110.924 439.914 li
119.81 438.774 li
149.431 432.785 li
158.317 430.369 li
164.241 429.386 li
182.013 427.793 li
187.938 427.892 li
199.786 428.936 li
208.672 430.332 li
223.482 432.962 li
238.293 434.882 li
247.178 435.251 li
276.799 434.313 li
315.306 429.253 li
336.04 428.575 li
341.964 428.539 li
350.85 429.363 li
374.546 431.96 li
401.205 433.847 li
430.826 433.179 li
442.674 431.793 li
454.522 430.608 li
475.256 429.608 li
498.953 429.355 li
510.801 430.024 li
522.649 430.466 li
540.421 431.793 li
555.232 431.817 li
567.08 432.349 li
578.928 431.985 li
635.208 429.584 li
655.941 429.262 li
670.752 429.639 li
685.562 429.841 li
706.296 430.553 li
753.689 430.672 li
771.462 430.215 li
792.196 429.664 li
854.399 429.575 li
866.247 429.956 li
910.677 429.924 li
910.677 433.689 li
25.0254 433.689 li
@
grestore
25.0254 404.154 mo
27.9874 400.941 li
30.9494 399.335 li
33.9114 398.591 li
36.8734 398.563 li
42.7974 399.621 li
75.3794 406.675 li
84.2664 408.89 li
93.1524 410.2 li
102.038 410.989 li
107.962 410.944 li
113.886 410.188 li
143.507 403.672 li
152.393 401.091 li
161.279 399.348 li
170.165 398.026 li
176.089 397.596 li
184.976 397.94 li
199.786 399.611 li
208.672 401.328 li
220.52 403.478 li
244.216 406.874 li
259.027 407.328 li
267.913 406.748 li
279.761 405.115 li
297.533 402.378 li
315.306 400.004 li
327.154 399.182 li
341.964 398.966 li
350.85 399.554 li
389.357 402.986 li
401.205 403.403 li
424.901 403.437 li
436.75 402.449 li
457.484 400.628 li
481.18 399.644 li
493.029 399.5 li
522.649 400.85 li
540.421 402.107 li
570.042 402.674 li
584.852 402.264 li
611.51 400.975 li
629.283 399.885 li
650.017 399.521 li
685.562 400.015 li
703.335 400.75 li
729.993 401.25 li
741.84 401.093 li
756.651 400.896 li
765.538 400.701 li
783.309 399.869 li
809.968 399.649 li
821.816 399.622 li
842.55 399.533 li
857.361 399.893 li
872.171 400.044 li
910.677 400.417 li
910.677 404.154 li
cp
f
gsave
25.025 453.379 mo
913.639 453.379 li
913.639 .5 li
25.025 .5 li
cp
clp
1 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
25.0254 404.154 mo
27.9874 400.941 li
30.9494 399.335 li
33.9114 398.591 li
36.8734 398.563 li
42.7974 399.621 li
75.3794 406.675 li
84.2664 408.89 li
93.1524 410.2 li
102.038 410.989 li
107.962 410.944 li
113.886 410.188 li
143.507 403.672 li
152.393 401.091 li
161.279 399.348 li
170.165 398.026 li
176.089 397.596 li
184.976 397.94 li
199.786 399.611 li
208.672 401.328 li
220.52 403.478 li
244.216 406.874 li
259.027 407.328 li
267.913 406.748 li
279.761 405.115 li
297.533 402.378 li
315.306 400.004 li
327.154 399.182 li
341.964 398.966 li
350.85 399.554 li
389.357 402.986 li
401.205 403.403 li
424.901 403.437 li
436.75 402.449 li
457.484 400.628 li
481.18 399.644 li
493.029 399.5 li
522.649 400.85 li
540.421 402.107 li
570.042 402.674 li
584.852 402.264 li
611.51 400.975 li
629.283 399.885 li
650.017 399.521 li
685.562 400.015 li
703.335 400.75 li
729.993 401.25 li
741.84 401.093 li
756.651 400.896 li
765.538 400.701 li
783.309 399.869 li
809.968 399.649 li
821.816 399.622 li
842.55 399.533 li
857.361 399.893 li
872.171 400.044 li
910.677 400.417 li
910.677 404.154 li
25.0254 404.154 li
@
grestore
25.0254 374.618 mo
25.0254 354.788 li
30.9494 355.172 li
36.8734 356.254 li
42.7974 358.199 li
51.6834 362.275 li
60.5694 367.123 li
72.4184 374.354 li
81.3044 379.677 li
87.2284 382.456 li
96.1144 385.626 li
102.038 386.898 li
107.962 386.983 li
113.886 386.204 li
119.81 384.756 li
125.734 382.379 li
140.545 374.486 li
146.469 370.32 li
152.393 366.018 li
155.355 364.382 li
161.279 362.2 li
179.051 356.799 li
184.976 356.406 li
190.9 356.834 li
196.824 357.966 li
202.748 360.001 li
235.33 374.846 li
241.254 376.79 li
247.178 378.011 li
253.103 378.597 li
261.989 378.597 li
270.875 377.659 li
276.799 376.319 li
282.723 374.327 li
312.344 362.766 li
321.23 359.928 li
327.154 358.633 li
333.078 358.01 li
341.964 357.968 li
347.888 358.583 li
356.775 360.381 li
374.546 364.75 li
383.433 367.465 li
389.357 368.673 li
407.129 371.258 li
416.015 371.585 li
424.901 371.278 li
430.826 370.492 li
436.75 369.069 li
448.598 365.796 li
481.18 360.314 li
490.067 359.24 li
495.991 359.089 li
504.877 359.753 li
522.649 361.388 li
543.383 364.831 li
567.08 366.966 li
575.966 367.028 li
584.852 366.57 li
593.739 365.54 li
605.587 364.011 li
614.473 363.082 li
632.245 360.577 li
644.093 359.956 li
655.941 359.863 li
667.79 359.693 li
676.675 359.511 li
685.562 360.104 li
706.296 362.325 li
738.879 363.855 li
753.689 363.148 li
818.854 359.365 li
839.588 359.347 li
848.475 359.394 li
881.057 360.673 li
910.677 361.501 li
910.677 374.618 li
cp
f
gsave
25.025 453.379 mo
913.639 453.379 li
913.639 .5 li
25.025 .5 li
cp
clp
1 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
25.0254 374.618 mo
25.0254 354.788 li
30.9494 355.172 li
36.8734 356.254 li
42.7974 358.199 li
51.6834 362.275 li
60.5694 367.123 li
72.4184 374.354 li
81.3044 379.677 li
87.2284 382.456 li
96.1144 385.626 li
102.038 386.898 li
107.962 386.983 li
113.886 386.204 li
119.81 384.756 li
125.734 382.379 li
140.545 374.486 li
146.469 370.32 li
152.393 366.018 li
155.355 364.382 li
161.279 362.2 li
179.051 356.799 li
184.976 356.406 li
190.9 356.834 li
196.824 357.966 li
202.748 360.001 li
235.33 374.846 li
241.254 376.79 li
247.178 378.011 li
253.103 378.597 li
261.989 378.597 li
270.875 377.659 li
276.799 376.319 li
282.723 374.327 li
312.344 362.766 li
321.23 359.928 li
327.154 358.633 li
333.078 358.01 li
341.964 357.968 li
347.888 358.583 li
356.775 360.381 li
374.546 364.75 li
383.433 367.465 li
389.357 368.673 li
407.129 371.258 li
416.015 371.585 li
424.901 371.278 li
430.826 370.492 li
436.75 369.069 li
448.598 365.796 li
481.18 360.314 li
490.067 359.24 li
495.991 359.089 li
504.877 359.753 li
522.649 361.388 li
543.383 364.831 li
567.08 366.966 li
575.966 367.028 li
584.852 366.57 li
593.739 365.54 li
605.587 364.011 li
614.473 363.082 li
632.245 360.577 li
644.093 359.956 li
655.941 359.863 li
667.79 359.693 li
676.675 359.511 li
685.562 360.104 li
706.296 362.325 li
738.879 363.855 li
753.689 363.148 li
818.854 359.365 li
839.588 359.347 li
848.475 359.394 li
881.057 360.673 li
910.677 361.501 li
910.677 374.618 li
25.0254 374.618 li
@
grestore
25.0254 345.083 mo
25.0254 346.888 li
33.9114 347.037 li
45.7594 347.668 li
66.4944 347.768 li
75.3794 347.042 li
90.1904 345.574 li
107.962 344.363 li
116.848 344.491 li
131.659 345.054 li
143.507 344.881 li
161.279 346.083 li
173.128 345.69 li
187.938 346.282 li
223.482 344.828 li
250.141 344.468 li
264.951 344.553 li
291.609 344.876 li
327.154 344.844 li
336.04 344.567 li
353.812 344.78 li
377.509 344.11 li
490.067 346.185 li
519.687 345.221 li
593.739 345.029 li
605.587 345.389 li
629.283 345.532 li
647.055 345.488 li
667.79 345.31 li
718.144 345.148 li
732.955 345.215 li
750.727 345.423 li
836.627 345.15 li
848.475 345.355 li
863.285 345.369 li
892.906 345.392 li
878.095 345.083 li
cp
.884459 .268955 1 .168185 cmyk
f
gsave
25.025 453.379 mo
913.639 453.379 li
913.639 .5 li
25.025 .5 li
cp
clp
1 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
25.0254 345.083 mo
25.0254 346.888 li
33.9114 347.037 li
45.7594 347.668 li
66.4944 347.768 li
75.3794 347.042 li
90.1904 345.574 li
107.962 344.363 li
116.848 344.491 li
131.659 345.054 li
143.507 344.881 li
161.279 346.083 li
173.128 345.69 li
187.938 346.282 li
223.482 344.828 li
250.141 344.468 li
264.951 344.553 li
291.609 344.876 li
327.154 344.844 li
336.04 344.567 li
353.812 344.78 li
377.509 344.11 li
490.067 346.185 li
519.687 345.221 li
593.739 345.029 li
605.587 345.389 li
629.283 345.532 li
647.055 345.488 li
667.79 345.31 li
718.144 345.148 li
732.955 345.215 li
750.727 345.423 li
836.627 345.15 li
848.475 345.355 li
863.285 345.369 li
892.906 345.392 li
878.095 345.083 li
25.0254 345.083 li
@
grestore
25.0254 315.547 mo
27.9874 316.358 li
48.7214 316.034 li
63.5314 316.65 li
72.4184 316.273 li
90.1904 315.16 li
107.962 314.613 li
116.848 314.911 li
131.659 315.921 li
143.507 315.911 li
158.317 317.07 li
179.051 316.732 li
187.938 317.049 li
238.293 314.874 li
261.989 315.062 li
273.837 315.443 li
291.609 315.824 li
327.154 316.325 li
341.964 315.98 li
356.775 315.897 li
371.585 315.268 li
392.319 315.299 li
424.901 315.509 li
481.18 316.125 li
493.029 315.789 li
510.801 315.174 li
534.498 315.289 li
549.307 315.314 li
644.093 316.264 li
658.904 316.059 li
676.675 315.888 li
697.41 315.586 li
735.917 315.488 li
792.196 315.984 li
851.437 315.74 li
611.51 315.547 li
cp
f
gsave
25.025 453.379 mo
913.639 453.379 li
913.639 .5 li
25.025 .5 li
cp
clp
1 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
25.0254 315.547 mo
27.9874 316.358 li
48.7214 316.034 li
63.5314 316.65 li
72.4184 316.273 li
90.1904 315.16 li
107.962 314.613 li
116.848 314.911 li
131.659 315.921 li
143.507 315.911 li
158.317 317.07 li
179.051 316.732 li
187.938 317.049 li
238.293 314.874 li
261.989 315.062 li
273.837 315.443 li
291.609 315.824 li
327.154 316.325 li
341.964 315.98 li
356.775 315.897 li
371.585 315.268 li
392.319 315.299 li
424.901 315.509 li
481.18 316.125 li
493.029 315.789 li
510.801 315.174 li
534.498 315.289 li
549.307 315.314 li
644.093 316.264 li
658.904 316.059 li
676.675 315.888 li
697.41 315.586 li
735.917 315.488 li
792.196 315.984 li
851.437 315.74 li
611.51 315.547 li
25.0254 315.547 li
@
grestore
25.0254 286.011 mo
25.0254 305.004 li
30.9494 304.052 li
36.8734 302.5 li
42.7974 300.271 li
48.7214 297.407 li
57.6084 292.248 li
69.4564 284.424 li
81.3044 276.275 li
87.2284 273.073 li
96.1144 269.301 li
102.038 267.681 li
107.962 267.32 li
113.886 267.894 li
119.81 269.188 li
125.734 271.348 li
140.545 278.639 li
146.469 282.556 li
152.393 286.659 li
155.355 288.241 li
161.279 290.34 li
176.089 294.526 li
182.013 295.127 li
187.938 294.801 li
193.862 293.671 li
199.786 291.65 li
205.71 288.63 li
214.596 283.77 li
238.293 272.425 li
244.216 270.602 li
250.141 269.358 li
256.065 268.777 li
261.989 268.93 li
273.837 270.092 li
279.761 271.297 li
285.685 273.332 li
300.496 279.302 li
318.268 284.908 li
324.192 286.407 li
330.116 287.278 li
336.04 287.483 li
341.964 287.156 li
347.888 286.321 li
356.775 284.188 li
371.585 279.601 li
383.433 275.348 li
392.319 273.346 li
404.167 271.104 li
413.053 270.41 li
421.94 270.126 li
427.864 270.484 li
433.788 271.607 li
445.636 274.523 li
478.218 279.846 li
487.104 280.773 li
493.029 280.815 li
519.687 278.77 li
525.611 277.579 li
537.46 274.672 li
552.27 272.311 li
567.08 270.861 li
575.966 270.414 li
584.852 270.709 li
593.739 271.698 li
602.625 272.901 li
620.397 274.238 li
632.245 275.704 li
644.093 276.054 li
664.828 275.994 li
679.638 275.753 li
688.524 274.707 li
703.335 272.654 li
721.106 271.462 li
747.765 270.574 li
759.613 271.284 li
804.044 273.488 li
827.741 273.088 li
872.171 271.188 li
901.792 269.863 li
910.677 269.599 li
910.677 286.011 li
cp
f
gsave
25.025 453.379 mo
913.639 453.379 li
913.639 .5 li
25.025 .5 li
cp
clp
1 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
25.0254 286.011 mo
25.0254 305.004 li
30.9494 304.052 li
36.8734 302.5 li
42.7974 300.271 li
48.7214 297.407 li
57.6084 292.248 li
69.4564 284.424 li
81.3044 276.275 li
87.2284 273.073 li
96.1144 269.301 li
102.038 267.681 li
107.962 267.32 li
113.886 267.894 li
119.81 269.188 li
125.734 271.348 li
140.545 278.639 li
146.469 282.556 li
152.393 286.659 li
155.355 288.241 li
161.279 290.34 li
176.089 294.526 li
182.013 295.127 li
187.938 294.801 li
193.862 293.671 li
199.786 291.65 li
205.71 288.63 li
214.596 283.77 li
238.293 272.425 li
244.216 270.602 li
250.141 269.358 li
256.065 268.777 li
261.989 268.93 li
273.837 270.092 li
279.761 271.297 li
285.685 273.332 li
300.496 279.302 li
318.268 284.908 li
324.192 286.407 li
330.116 287.278 li
336.04 287.483 li
341.964 287.156 li
347.888 286.321 li
356.775 284.188 li
371.585 279.601 li
383.433 275.348 li
392.319 273.346 li
404.167 271.104 li
413.053 270.41 li
421.94 270.126 li
427.864 270.484 li
433.788 271.607 li
445.636 274.523 li
478.218 279.846 li
487.104 280.773 li
493.029 280.815 li
519.687 278.77 li
525.611 277.579 li
537.46 274.672 li
552.27 272.311 li
567.08 270.861 li
575.966 270.414 li
584.852 270.709 li
593.739 271.698 li
602.625 272.901 li
620.397 274.238 li
632.245 275.704 li
644.093 276.054 li
664.828 275.994 li
679.638 275.753 li
688.524 274.707 li
703.335 272.654 li
721.106 271.462 li
747.765 270.574 li
759.613 271.284 li
804.044 273.488 li
827.741 273.088 li
872.171 271.188 li
901.792 269.863 li
910.677 269.599 li
910.677 286.011 li
25.0254 286.011 li
@
grestore
25.0254 256.475 mo
25.0254 257.871 li
36.8734 264.379 li
42.7974 266.76 li
48.7214 268.36 li
54.6454 269.305 li
60.5694 269.452 li
69.4564 268.568 li
78.3424 267.345 li
84.2664 265.887 li
102.038 259.962 li
110.924 256.097 li
119.81 252.279 li
125.734 250.509 li
137.583 248.009 li
143.507 247.15 li
149.431 247.128 li
155.355 247.903 li
167.203 250.498 li
173.128 252.248 li
182.013 255.854 li
190.9 259.263 li
208.672 264.906 li
214.596 266.329 li
220.52 267.049 li
229.406 267.163 li
238.293 266.464 li
247.178 264.979 li
256.065 262.761 li
291.609 252.334 li
300.496 251.046 li
306.42 250.744 li
312.344 250.893 li
318.268 251.523 li
344.926 256.433 li
365.661 262.312 li
374.546 263.663 li
383.433 264.257 li
392.319 264.246 li
401.205 263.464 li
410.091 261.788 li
421.94 259.481 li
433.788 257.319 li
448.598 254.536 li
457.484 253.546 li
463.408 253.359 li
472.295 253.975 li
495.991 256.746 li
513.763 259.957 li
528.573 261.521 li
540.421 261.921 li
555.232 261.517 li
564.118 260.678 li
578.928 259.036 li
617.435 254.687 li
626.321 254.625 li
652.979 255.943 li
673.713 258.702 li
685.562 259.496 li
694.448 260.302 li
706.296 260.496 li
721.106 260.333 li
762.575 256.53 li
771.462 256.05 li
804.044 256.382 li
821.816 257.574 li
836.627 258.397 li
857.361 259.216 li
889.943 258.573 li
904.754 257.836 li
910.677 257.638 li
910.677 256.475 li
cp
.818326 .616052 3.0518e-5 3.0518e-5 cmyk
f
gsave
25.025 453.379 mo
913.639 453.379 li
913.639 .5 li
25.025 .5 li
cp
clp
1 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
25.0254 256.475 mo
25.0254 257.871 li
36.8734 264.379 li
42.7974 266.76 li
48.7214 268.36 li
54.6454 269.305 li
60.5694 269.452 li
69.4564 268.568 li
78.3424 267.345 li
84.2664 265.887 li
102.038 259.962 li
110.924 256.097 li
119.81 252.279 li
125.734 250.509 li
137.583 248.009 li
143.507 247.15 li
149.431 247.128 li
155.355 247.903 li
167.203 250.498 li
173.128 252.248 li
182.013 255.854 li
190.9 259.263 li
208.672 264.906 li
214.596 266.329 li
220.52 267.049 li
229.406 267.163 li
238.293 266.464 li
247.178 264.979 li
256.065 262.761 li
291.609 252.334 li
300.496 251.046 li
306.42 250.744 li
312.344 250.893 li
318.268 251.523 li
344.926 256.433 li
365.661 262.312 li
374.546 263.663 li
383.433 264.257 li
392.319 264.246 li
401.205 263.464 li
410.091 261.788 li
421.94 259.481 li
433.788 257.319 li
448.598 254.536 li
457.484 253.546 li
463.408 253.359 li
472.295 253.975 li
495.991 256.746 li
513.763 259.957 li
528.573 261.521 li
540.421 261.921 li
555.232 261.517 li
564.118 260.678 li
578.928 259.036 li
617.435 254.687 li
626.321 254.625 li
652.979 255.943 li
673.713 258.702 li
685.562 259.496 li
694.448 260.302 li
706.296 260.496 li
721.106 260.333 li
762.575 256.53 li
771.462 256.05 li
804.044 256.382 li
821.816 257.574 li
836.627 258.397 li
857.361 259.216 li
889.943 258.573 li
904.754 257.836 li
910.677 257.638 li
910.677 256.475 li
25.0254 256.475 li
@
grestore
25.0254 226.94 mo
25.0254 228.135 li
33.9114 231.879 li
42.7974 234.913 li
51.6834 237.034 li
60.5694 238.037 li
66.4944 238.218 li
72.4184 237.74 li
78.3424 236.329 li
90.1904 232.253 li
96.1144 229.486 li
105 225.049 li
110.924 223.239 li
119.81 220.884 li
128.696 217.941 li
134.621 216.862 li
140.545 216.694 li
149.431 217.491 li
158.317 219.133 li
170.165 222.314 li
176.089 224.41 li
190.9 230.672 li
199.786 233.044 li
208.672 234.629 li
214.596 235.059 li
223.482 234.823 li
229.406 234.096 li
235.33 232.686 li
259.027 224.967 li
267.913 222.121 li
273.837 221.111 li
294.571 219.274 li
300.496 219.504 li
309.381 220.487 li
318.268 222.309 li
336.04 226.963 li
359.736 231.455 li
368.623 232.387 li
374.546 232.372 li
383.433 231.265 li
404.167 228.053 li
413.053 225.559 li
418.978 224.746 li
433.788 223.69 li
442.674 223.028 li
454.522 223.049 li
463.408 223.778 li
481.18 226.1 li
493.029 227.576 li
507.838 229.329 li
522.649 229.885 li
534.498 229.604 li
558.194 228.357 li
578.928 226.111 li
608.548 225.32 li
617.435 225.704 li
638.17 227.386 li
682.6 228.791 li
694.448 228.543 li
712.22 228.104 li
724.069 227.447 li
735.917 226.932 li
786.272 227.159 li
804.044 227.642 li
836.627 228.29 li
872.171 228.238 li
895.868 228.102 li
910.677 227.968 li
910.677 226.94 li
cp
f
gsave
25.025 453.379 mo
913.639 453.379 li
913.639 .5 li
25.025 .5 li
cp
clp
1 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
25.0254 226.94 mo
25.0254 228.135 li
33.9114 231.879 li
42.7974 234.913 li
51.6834 237.034 li
60.5694 238.037 li
66.4944 238.218 li
72.4184 237.74 li
78.3424 236.329 li
90.1904 232.253 li
96.1144 229.486 li
105 225.049 li
110.924 223.239 li
119.81 220.884 li
128.696 217.941 li
134.621 216.862 li
140.545 216.694 li
149.431 217.491 li
158.317 219.133 li
170.165 222.314 li
176.089 224.41 li
190.9 230.672 li
199.786 233.044 li
208.672 234.629 li
214.596 235.059 li
223.482 234.823 li
229.406 234.096 li
235.33 232.686 li
259.027 224.967 li
267.913 222.121 li
273.837 221.111 li
294.571 219.274 li
300.496 219.504 li
309.381 220.487 li
318.268 222.309 li
336.04 226.963 li
359.736 231.455 li
368.623 232.387 li
374.546 232.372 li
383.433 231.265 li
404.167 228.053 li
413.053 225.559 li
418.978 224.746 li
433.788 223.69 li
442.674 223.028 li
454.522 223.049 li
463.408 223.778 li
481.18 226.1 li
493.029 227.576 li
507.838 229.329 li
522.649 229.885 li
534.498 229.604 li
558.194 228.357 li
578.928 226.111 li
608.548 225.32 li
617.435 225.704 li
638.17 227.386 li
682.6 228.791 li
694.448 228.543 li
712.22 228.104 li
724.069 227.447 li
735.917 226.932 li
786.272 227.159 li
804.044 227.642 li
836.627 228.29 li
872.171 228.238 li
895.868 228.102 li
910.677 227.968 li
910.677 226.94 li
25.0254 226.94 li
@
grestore
25.0254 197.404 mo
25.0254 199.456 li
27.9874 202.073 li
30.9494 204.051 li
33.9114 205.249 li
36.8734 205.798 li
42.7974 205.842 li
63.5314 205.34 li
93.1524 204.744 li
116.848 203.355 li
125.734 203.105 li
134.621 202.92 li
146.469 201.985 li
176.089 201.554 li
232.368 200.331 li
259.027 199.158 li
273.837 199.545 li
291.609 199.141 li
341.964 199.366 li
353.812 199.653 li
371.585 199.152 li
386.395 198.695 li
401.205 198.998 li
416.015 198.21 li
433.788 198.284 li
454.522 197.909 li
469.333 197.752 li
484.142 197.828 li
537.46 197.717 li
561.156 197.442 li
570.042 197.354 li
590.776 196.865 li
608.548 196.737 li
626.321 196.338 li
647.055 196.507 li
658.904 196.293 li
691.486 196.166 li
712.22 195.791 li
724.069 195.846 li
738.879 196.021 li
762.575 195.817 li
804.044 195.461 li
821.816 195.304 li
839.588 195.136 li
851.437 194.928 li
869.21 195.241 li
889.943 195.079 li
901.792 195.175 li
910.677 194.702 li
910.677 197.404 li
cp
f
gsave
25.025 453.379 mo
913.639 453.379 li
913.639 .5 li
25.025 .5 li
cp
clp
1 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
25.0254 197.404 mo
25.0254 199.456 li
27.9874 202.073 li
30.9494 204.051 li
33.9114 205.249 li
36.8734 205.798 li
42.7974 205.842 li
63.5314 205.34 li
93.1524 204.744 li
116.848 203.355 li
125.734 203.105 li
134.621 202.92 li
146.469 201.985 li
176.089 201.554 li
232.368 200.331 li
259.027 199.158 li
273.837 199.545 li
291.609 199.141 li
341.964 199.366 li
353.812 199.653 li
371.585 199.152 li
386.395 198.695 li
401.205 198.998 li
416.015 198.21 li
433.788 198.284 li
454.522 197.909 li
469.333 197.752 li
484.142 197.828 li
537.46 197.717 li
561.156 197.442 li
570.042 197.354 li
590.776 196.865 li
608.548 196.737 li
626.321 196.338 li
647.055 196.507 li
658.904 196.293 li
691.486 196.166 li
712.22 195.791 li
724.069 195.846 li
738.879 196.021 li
762.575 195.817 li
804.044 195.461 li
821.816 195.304 li
839.588 195.136 li
851.437 194.928 li
869.21 195.241 li
889.943 195.079 li
901.792 195.175 li
910.677 194.702 li
910.677 197.404 li
25.0254 197.404 li
@
grestore
25.0254 167.869 mo
27.9874 166.36 li
30.9494 165.14 li
39.8354 161.9 li
48.7214 159.414 li
54.6454 158.28 li
60.5694 157.642 li
66.4944 157.641 li
72.4184 158.444 li
81.3044 160.736 li
90.1904 163.686 li
96.1144 166.411 li
105 170.662 li
110.924 172.533 li
119.81 175.06 li
128.696 177.922 li
134.621 179.023 li
140.545 179.244 li
149.431 178.768 li
155.355 177.962 li
164.241 175.738 li
176.089 172.003 li
187.938 167.435 li
196.824 164.29 li
202.748 162.881 li
208.672 162.015 li
217.558 161.461 li
223.482 161.534 li
229.406 162.166 li
235.33 163.468 li
247.178 167.072 li
267.913 173.444 li
279.761 175.319 li
288.647 176.48 li
294.571 176.688 li
303.458 176.183 li
312.344 175.186 li
318.268 173.978 li
339.002 168.427 li
356.775 165.056 li
365.661 163.954 li
371.585 163.734 li
380.471 164.299 li
398.243 166.399 li
404.167 167.919 li
413.053 170.53 li
418.978 171.433 li
433.788 172.891 li
439.712 173.452 li
445.636 173.469 li
463.408 172.408 li
481.18 170.372 li
490.067 169.186 li
507.838 166.299 li
513.763 166.104 li
549.307 167.005 li
558.194 167.825 li
573.004 169.554 li
599.663 170.51 li
626.321 169.63 li
676.675 167.399 li
694.448 167.688 li
753.689 169.187 li
807.006 168.366 li
818.854 168.103 li
845.512 167.963 li
872.171 167.846 li
886.981 168.085 li
904.754 168.029 li
910.677 168.473 li
907.715 167.869 li
cp
f
gsave
25.025 453.379 mo
913.639 453.379 li
913.639 .5 li
25.025 .5 li
cp
clp
1 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
25.0254 167.869 mo
27.9874 166.36 li
30.9494 165.14 li
39.8354 161.9 li
48.7214 159.414 li
54.6454 158.28 li
60.5694 157.642 li
66.4944 157.641 li
72.4184 158.444 li
81.3044 160.736 li
90.1904 163.686 li
96.1144 166.411 li
105 170.662 li
110.924 172.533 li
119.81 175.06 li
128.696 177.922 li
134.621 179.023 li
140.545 179.244 li
149.431 178.768 li
155.355 177.962 li
164.241 175.738 li
176.089 172.003 li
187.938 167.435 li
196.824 164.29 li
202.748 162.881 li
208.672 162.015 li
217.558 161.461 li
223.482 161.534 li
229.406 162.166 li
235.33 163.468 li
247.178 167.072 li
267.913 173.444 li
279.761 175.319 li
288.647 176.48 li
294.571 176.688 li
303.458 176.183 li
312.344 175.186 li
318.268 173.978 li
339.002 168.427 li
356.775 165.056 li
365.661 163.954 li
371.585 163.734 li
380.471 164.299 li
398.243 166.399 li
404.167 167.919 li
413.053 170.53 li
418.978 171.433 li
433.788 172.891 li
439.712 173.452 li
445.636 173.469 li
463.408 172.408 li
481.18 170.372 li
490.067 169.186 li
507.838 166.299 li
513.763 166.104 li
549.307 167.005 li
558.194 167.825 li
573.004 169.554 li
599.663 170.51 li
626.321 169.63 li
676.675 167.399 li
694.448 167.688 li
753.689 169.187 li
807.006 168.366 li
818.854 168.103 li
845.512 167.963 li
872.171 167.846 li
886.981 168.085 li
904.754 168.029 li
910.677 168.473 li
907.715 167.869 li
25.0254 167.869 li
@
grestore
25.0254 138.333 mo
25.0254 139.894 li
42.7974 147.816 li
48.7214 149.633 li
54.6454 150.742 li
60.5694 151.139 li
69.4564 150.651 li
78.3424 149.682 li
84.2664 148.342 li
93.1524 145.146 li
110.924 138.427 li
119.81 134.71 li
125.734 132.794 li
134.621 130.711 li
140.545 129.531 li
146.469 129.065 li
152.393 129.597 li
170.165 132.889 li
176.089 135.021 li
187.938 140.17 li
208.672 146.955 li
214.596 148.236 li
220.52 148.994 li
226.444 149.15 li
235.33 148.545 li
244.216 147.373 li
253.103 145.279 li
267.913 141.089 li
282.723 136.488 li
291.609 134.467 li
300.496 133.115 li
306.42 132.701 li
312.344 132.878 li
318.268 133.594 li
344.926 138.609 li
353.812 141.233 li
362.698 143.893 li
371.585 145.644 li
380.471 146.448 li
389.357 146.443 li
398.243 145.763 li
407.129 144.114 li
418.978 141.767 li
430.826 139.858 li
451.56 135.6 li
460.446 135.086 li
469.333 135.36 li
487.104 136.84 li
495.991 138.364 li
510.801 141.151 li
528.573 143.112 li
540.421 143.782 li
552.27 143.709 li
561.156 143.026 li
590.776 139.311 li
617.435 136.558 li
623.359 136.594 li
638.17 137.277 li
647.055 137.408 li
655.941 138.33 li
673.713 140.466 li
697.41 142.267 li
715.182 142.323 li
727.031 141.331 li
747.765 139.545 li
756.651 138.525 li
780.347 137.719 li
792.196 137.739 li
812.93 138.753 li
842.55 140.517 li
863.285 141.011 li
881.057 140.76 li
910.677 139.437 li
910.677 138.333 li
cp
f
gsave
25.025 453.379 mo
913.639 453.379 li
913.639 .5 li
25.025 .5 li
cp
clp
1 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
25.0254 138.333 mo
25.0254 139.894 li
42.7974 147.816 li
48.7214 149.633 li
54.6454 150.742 li
60.5694 151.139 li
69.4564 150.651 li
78.3424 149.682 li
84.2664 148.342 li
93.1524 145.146 li
110.924 138.427 li
119.81 134.71 li
125.734 132.794 li
134.621 130.711 li
140.545 129.531 li
146.469 129.065 li
152.393 129.597 li
170.165 132.889 li
176.089 135.021 li
187.938 140.17 li
208.672 146.955 li
214.596 148.236 li
220.52 148.994 li
226.444 149.15 li
235.33 148.545 li
244.216 147.373 li
253.103 145.279 li
267.913 141.089 li
282.723 136.488 li
291.609 134.467 li
300.496 133.115 li
306.42 132.701 li
312.344 132.878 li
318.268 133.594 li
344.926 138.609 li
353.812 141.233 li
362.698 143.893 li
371.585 145.644 li
380.471 146.448 li
389.357 146.443 li
398.243 145.763 li
407.129 144.114 li
418.978 141.767 li
430.826 139.858 li
451.56 135.6 li
460.446 135.086 li
469.333 135.36 li
487.104 136.84 li
495.991 138.364 li
510.801 141.151 li
528.573 143.112 li
540.421 143.782 li
552.27 143.709 li
561.156 143.026 li
590.776 139.311 li
617.435 136.558 li
623.359 136.594 li
638.17 137.277 li
647.055 137.408 li
655.941 138.33 li
673.713 140.466 li
697.41 142.267 li
715.182 142.323 li
727.031 141.331 li
747.765 139.545 li
756.651 138.525 li
780.347 137.719 li
792.196 137.739 li
812.93 138.753 li
842.55 140.517 li
863.285 141.011 li
881.057 140.76 li
910.677 139.437 li
910.677 138.333 li
25.0254 138.333 li
@
grestore
25.0254 108.798 mo
25.0254 111.303 li
27.9874 113.641 li
30.9494 115.411 li
33.9114 116.457 li
36.8734 116.903 li
48.7214 116.841 li
84.2664 116.961 li
113.886 115.749 li
125.734 114.636 li
199.786 113.244 li
270.875 112.315 li
291.609 111.189 li
401.205 109.423 li
413.053 109.337 li
424.901 109.483 li
451.56 109.04 li
487.104 108.974 li
513.763 109.141 li
534.498 109.189 li
561.156 108.815 li
655.941 107.639 li
667.79 107.643 li
688.524 107.298 li
774.423 106.862 li
789.234 106.699 li
807.006 106.683 li
830.703 106.384 li
854.399 106.167 li
910.677 106.191 li
910.677 108.798 li
cp
f
gsave
25.025 453.379 mo
913.639 453.379 li
913.639 .5 li
25.025 .5 li
cp
clp
1 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
25.0254 108.798 mo
25.0254 111.303 li
27.9874 113.641 li
30.9494 115.411 li
33.9114 116.457 li
36.8734 116.903 li
48.7214 116.841 li
84.2664 116.961 li
113.886 115.749 li
125.734 114.636 li
199.786 113.244 li
270.875 112.315 li
291.609 111.189 li
401.205 109.423 li
413.053 109.337 li
424.901 109.483 li
451.56 109.04 li
487.104 108.974 li
513.763 109.141 li
534.498 109.189 li
561.156 108.815 li
655.941 107.639 li
667.79 107.643 li
688.524 107.298 li
774.423 106.862 li
789.234 106.699 li
807.006 106.683 li
830.703 106.384 li
854.399 106.167 li
910.677 106.191 li
910.677 108.798 li
25.0254 108.798 li
@
grestore
25.0254 79.2614 mo
25.0254 80.9934 li
30.9494 80.4554 li
42.7974 80.4144 li
72.4184 80.2954 li
84.2664 79.8674 li
116.848 80.1134 li
134.621 80.3754 li
146.469 80.5084 li
155.355 80.6874 li
176.089 80.3664 li
187.938 80.6764 li
205.71 80.3324 li
220.52 80.2634 li
232.368 80.4124 li
250.141 80.8104 li
282.723 80.4084 li
312.344 79.4684 li
321.23 79.3654 li
333.078 78.7224 li
344.926 79.1104 li
356.775 79.1604 li
371.585 78.7694 li
392.319 79.4504 li
401.205 79.6224 li
416.015 80.2634 li
469.333 80.1804 li
478.218 80.1664 li
490.067 80.2834 li
510.801 79.5654 li
528.573 79.7194 li
641.131 79.7764 li
661.866 79.5424 li
673.713 79.5524 li
685.562 79.4144 li
715.182 79.8694 li
783.309 79.8314 li
795.158 79.6034 li
833.665 79.7414 li
845.512 79.6984 li
857.361 79.8794 li
878.095 79.6714 li
910.677 79.7354 li
904.754 79.2614 li
cp
f
gsave
25.025 453.379 mo
913.639 453.379 li
913.639 .5 li
25.025 .5 li
cp
clp
1 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
25.0254 79.2614 mo
25.0254 80.9934 li
30.9494 80.4554 li
42.7974 80.4144 li
72.4184 80.2954 li
84.2664 79.8674 li
116.848 80.1134 li
134.621 80.3754 li
146.469 80.5084 li
155.355 80.6874 li
176.089 80.3664 li
187.938 80.6764 li
205.71 80.3324 li
220.52 80.2634 li
232.368 80.4124 li
250.141 80.8104 li
282.723 80.4084 li
312.344 79.4684 li
321.23 79.3654 li
333.078 78.7224 li
344.926 79.1104 li
356.775 79.1604 li
371.585 78.7694 li
392.319 79.4504 li
401.205 79.6224 li
416.015 80.2634 li
469.333 80.1804 li
478.218 80.1664 li
490.067 80.2834 li
510.801 79.5654 li
528.573 79.7194 li
641.131 79.7764 li
661.866 79.5424 li
673.713 79.5524 li
685.562 79.4144 li
715.182 79.8694 li
783.309 79.8314 li
795.158 79.6034 li
833.665 79.7414 li
845.512 79.6984 li
857.361 79.8794 li
878.095 79.6714 li
910.677 79.7354 li
904.754 79.2614 li
25.0254 79.2614 li
@
grestore
25.0254 49.7262 mo
27.9874 50.1992 li
42.7974 49.0202 li
54.6454 49.6262 li
69.4564 50.2382 li
81.3044 49.9302 li
90.1904 50.1322 li
110.924 51.1092 li
119.81 51.2712 li
134.621 51.9942 li
146.469 51.7402 li
161.279 51.7012 li
176.089 50.8962 li
187.938 51.3992 li
220.52 50.3692 li
374.546 50.5152 li
383.433 50.9772 li
401.205 50.7412 li
501.915 49.7462 li
513.763 49.7372 li
534.498 50.1082 li
549.307 50.1152 li
605.587 50.6302 li
620.397 50.4262 li
635.208 50.8892 li
658.904 50.5002 li
676.675 50.3982 li
706.296 50.3592 li
718.144 50.1822 li
729.993 50.1402 li
750.727 50.3392 li
789.234 50.2232 li
804.044 50.1902 li
824.778 50.1462 li
857.361 50.2562 li
910.677 50.3202 li
907.715 49.7262 li
cp
f
gsave
25.025 453.379 mo
913.639 453.379 li
913.639 .5 li
25.025 .5 li
cp
clp
1 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
25.0254 49.7262 mo
27.9874 50.1992 li
42.7974 49.0202 li
54.6454 49.6262 li
69.4564 50.2382 li
81.3044 49.9302 li
90.1904 50.1322 li
110.924 51.1092 li
119.81 51.2712 li
134.621 51.9942 li
146.469 51.7402 li
161.279 51.7012 li
176.089 50.8962 li
187.938 51.3992 li
220.52 50.3692 li
374.546 50.5152 li
383.433 50.9772 li
401.205 50.7412 li
501.915 49.7462 li
513.763 49.7372 li
534.498 50.1082 li
549.307 50.1152 li
605.587 50.6302 li
620.397 50.4262 li
635.208 50.8892 li
658.904 50.5002 li
676.675 50.3982 li
706.296 50.3592 li
718.144 50.1822 li
729.993 50.1402 li
750.727 50.3392 li
789.234 50.2232 li
804.044 50.1902 li
824.778 50.1462 li
857.361 50.2562 li
910.677 50.3202 li
907.715 49.7262 li
25.0254 49.7262 li
@
grestore
25.0254 20.1901 mo
25.0254 39.9871 li
72.4184 37.0651 li
90.1904 35.8431 li
170.165 31.6431 li
193.862 30.1731 li
214.596 29.0341 li
226.444 28.6281 li
238.293 28.1521 li
250.141 27.6501 li
259.027 27.3821 li
270.875 27.1661 li
285.685 26.3061 li
303.458 25.4921 li
324.192 24.5591 li
359.736 23.3551 li
380.471 22.3111 li
493.029 18.8741 li
501.915 18.3411 li
510.801 18.5221 li
519.687 18.7211 li
534.498 17.9391 li
552.27 17.3651 li
570.042 17.0921 li
584.852 16.6531 li
605.587 16.3151 li
638.17 15.0561 li
652.979 14.8661 li
664.828 14.7241 li
691.486 14.2041 li
718.144 13.8351 li
738.879 13.6931 li
750.727 13.1641 li
768.5 12.8771 li
777.385 12.7211 li
795.158 12.7571 li
842.55 11.1211 li
910.677 10.2141 li
910.677 20.1901 li
cp
f
gsave
25.025 453.379 mo
913.639 453.379 li
913.639 .5 li
25.025 .5 li
cp
clp
1 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
25.0254 20.1901 mo
25.0254 39.9871 li
72.4184 37.0651 li
90.1904 35.8431 li
170.165 31.6431 li
193.862 30.1731 li
214.596 29.0341 li
226.444 28.6281 li
238.293 28.1521 li
250.141 27.6501 li
259.027 27.3821 li
270.875 27.1661 li
285.685 26.3061 li
303.458 25.4921 li
324.192 24.5591 li
359.736 23.3551 li
380.471 22.3111 li
493.029 18.8741 li
501.915 18.3411 li
510.801 18.5221 li
519.687 18.7211 li
534.498 17.9391 li
552.27 17.3651 li
570.042 17.0921 li
584.852 16.6531 li
605.587 16.3151 li
638.17 15.0561 li
652.979 14.8661 li
664.828 14.7241 li
691.486 14.2041 li
718.144 13.8351 li
738.879 13.6931 li
750.727 13.1641 li
768.5 12.8771 li
777.385 12.7211 li
795.158 12.7571 li
842.55 11.1211 li
910.677 10.2141 li
910.677 20.1901 li
25.0254 20.1901 li
@
2 lw
2 lc
25.0254 433.129 mo
27.9874 430.352 li
30.9494 428.319 li
33.9114 427.215 li
36.8734 426.909 li
42.7974 427.694 li
63.5314 432.227 li
72.4184 434.536 li
81.3044 437.025 li
90.1904 438.522 li
105 440.068 li
110.924 439.913 li
119.81 438.775 li
149.431 432.784 li
158.317 430.368 li
164.241 429.387 li
182.013 427.793 li
187.938 427.892 li
199.786 428.936 li
208.672 430.332 li
223.482 432.962 li
238.293 434.883 li
247.178 435.25 li
276.799 434.314 li
315.306 429.254 li
336.04 428.574 li
341.964 428.539 li
350.85 429.362 li
374.546 431.961 li
401.205 433.848 li
430.826 433.18 li
442.674 431.793 li
454.522 430.608 li
475.256 429.608 li
498.953 429.355 li
510.801 430.025 li
522.649 430.466 li
540.421 431.793 li
555.232 431.816 li
567.08 432.349 li
578.928 431.984 li
635.208 429.583 li
655.941 429.263 li
670.752 429.639 li
685.562 429.841 li
706.296 430.553 li
753.689 430.672 li
771.462 430.215 li
792.196 429.663 li
854.399 429.574 li
866.247 429.956 li
910.677 429.924 li
.376226 .951812 .882841 .597406 cmyk
@
0 lc
[6 6 ] 0 dsh
25.0254 433.689 mo
915.121 433.689 li
1 /0 /CSD get_res sepcs
1 sep
@
2 lc
[] 0 dsh
25.0254 403.245 mo
27.9874 400.941 li
30.9494 399.335 li
33.9114 398.591 li
36.8734 398.563 li
42.7974 399.621 li
75.3794 406.676 li
84.2664 408.891 li
93.1524 410.2 li
102.038 410.989 li
107.962 410.944 li
113.886 410.188 li
143.507 403.672 li
152.393 401.091 li
161.279 399.349 li
170.165 398.026 li
176.089 397.597 li
184.976 397.94 li
199.786 399.611 li
208.672 401.328 li
220.52 403.478 li
244.216 406.874 li
259.027 407.328 li
267.913 406.748 li
279.761 405.115 li
297.533 402.378 li
315.306 400.004 li
327.154 399.182 li
341.964 398.966 li
350.85 399.555 li
389.357 402.986 li
401.205 403.403 li
424.901 403.437 li
436.75 402.449 li
457.484 400.628 li
481.18 399.644 li
493.029 399.5 li
522.649 400.85 li
540.421 402.107 li
570.042 402.674 li
584.852 402.265 li
611.51 400.975 li
629.283 399.886 li
650.017 399.521 li
685.562 400.016 li
703.335 400.75 li
729.993 401.25 li
741.84 401.094 li
756.651 400.896 li
765.538 400.701 li
783.309 399.869 li
809.968 399.649 li
821.816 399.622 li
842.55 399.533 li
857.361 399.893 li
872.171 400.044 li
910.677 400.417 li
.376226 .951812 .882841 .597406 cmyk
@
0 lc
[6 6 ] 0 dsh
25.0254 404.154 mo
915.121 404.154 li
1 /0 /CSD get_res sepcs
1 sep
@
2 lc
[] 0 dsh
25.0254 354.788 mo
30.9494 355.172 li
36.8734 356.254 li
42.7974 358.199 li
51.6834 362.275 li
60.5694 367.123 li
72.4184 374.354 li
81.3044 379.677 li
87.2284 382.456 li
96.1144 385.626 li
102.038 386.898 li
107.962 386.983 li
113.886 386.204 li
119.81 384.756 li
125.734 382.379 li
140.545 374.486 li
146.469 370.32 li
152.393 366.018 li
155.355 364.382 li
161.279 362.2 li
179.051 356.799 li
184.976 356.406 li
190.9 356.834 li
196.824 357.966 li
202.748 360.001 li
235.33 374.846 li
241.254 376.79 li
247.178 378.011 li
253.103 378.598 li
261.989 378.597 li
270.875 377.659 li
276.799 376.319 li
282.723 374.327 li
312.344 362.767 li
321.23 359.928 li
327.154 358.633 li
333.078 358.01 li
341.964 357.968 li
347.888 358.583 li
356.775 360.381 li
374.546 364.75 li
383.433 367.465 li
389.357 368.673 li
407.129 371.258 li
416.015 371.585 li
424.901 371.278 li
430.826 370.492 li
436.75 369.069 li
448.598 365.796 li
481.18 360.314 li
490.067 359.24 li
495.991 359.089 li
504.877 359.753 li
522.649 361.388 li
543.383 364.831 li
567.08 366.966 li
575.966 367.028 li
584.852 366.57 li
593.739 365.54 li
605.587 364.011 li
614.473 363.082 li
632.245 360.577 li
644.093 359.956 li
655.941 359.863 li
667.79 359.693 li
676.675 359.511 li
685.562 360.104 li
706.296 362.325 li
738.879 363.855 li
753.689 363.148 li
818.854 359.365 li
839.588 359.347 li
848.475 359.394 li
881.057 360.673 li
910.677 361.501 li
.376226 .951812 .882841 .597406 cmyk
@
0 lc
[6 6 ] 0 dsh
25.0254 354.927 mo
29.4684 355.544 li
33.9114 356.703 li
39.8354 359.028 li
45.7594 362.086 li
54.6454 367.611 li
73.8994 380.09 li
81.3044 383.862 li
87.2284 386.112 li
93.1524 387.558 li
99.0764 388.139 li
105 387.845 li
110.924 386.709 li
116.848 384.814 li
124.254 381.558 li
133.14 376.752 li
153.874 364.998 li
161.279 361.683 li
167.203 359.661 li
173.128 358.292 li
179.051 357.621 li
184.976 357.653 li
190.9 358.356 li
196.824 359.661 li
204.229 361.99 li
214.596 366.106 li
233.849 373.951 li
241.254 376.239 li
248.66 377.806 li
254.584 378.461 li
260.508 378.555 li
266.432 378.093 li
273.837 376.793 li
281.242 374.814 li
291.609 371.252 li
315.306 362.702 li
324.192 360.422 li
331.597 359.209 li
339.002 358.693 li
346.407 358.875 li
353.812 359.702 li
362.698 361.391 li
374.546 364.386 li
393.8 369.293 li
402.686 370.89 li
411.572 371.778 li
418.978 371.906 li
427.864 371.332 li
436.75 370.051 li
448.598 367.546 li
476.737 361.076 li
487.104 359.593 li
495.991 358.99 li
504.877 359.037 li
515.244 359.836 li
527.092 361.48 li
559.674 366.452 li
570.042 367.156 li
580.409 367.165 li
590.776 366.497 li
602.625 365.069 li
644.093 359.316 li
655.941 358.762 li
667.79 358.939 li
681.119 359.866 li
727.031 363.839 li
740.36 363.838 li
753.689 363.136 li
771.462 361.474 li
798.12 359.006 li
812.93 358.381 li
827.741 358.486 li
845.512 359.372 li
881.057 361.402 li
897.348 361.519 li
913.639 360.96 li
915.121 360.881 li
1 /0 /CSD get_res sepcs
1 sep
@
2 lc
[] 0 dsh
25.0254 346.887 mo
33.9114 347.036 li
45.7594 347.667 li
66.4944 347.767 li
75.3794 347.041 li
90.1904 345.574 li
107.962 344.363 li
116.848 344.491 li
131.659 345.053 li
143.507 344.88 li
161.279 346.082 li
173.128 345.69 li
187.938 346.282 li
223.482 344.827 li
250.141 344.467 li
264.951 344.552 li
291.609 344.875 li
327.154 344.843 li
336.04 344.567 li
353.812 344.78 li
377.509 344.11 li
490.067 346.184 li
519.687 345.22 li
593.739 345.029 li
605.587 345.388 li
629.283 345.532 li
647.055 345.488 li
667.79 345.309 li
718.144 345.148 li
732.955 345.214 li
750.727 345.422 li
836.627 345.15 li
848.475 345.355 li
863.285 345.368 li
892.906 345.391 li
910.677 345.654 li
.84448 .400854 1 .406714 cmyk
@
0 lc
[6 6 ] 0 dsh
25.0254 345.083 mo
915.121 345.083 li
1 /0 /CSD get_res sepcs
1 sep
@
2 lc
[] 0 dsh
25.0254 316.356 mo
33.9114 316.098 li
42.7974 315.81 li
57.6084 316.525 li
66.4944 316.586 li
78.3424 315.798 li
90.1904 315.16 li
107.962 314.613 li
116.848 314.912 li
131.659 315.92 li
143.507 315.912 li
158.317 317.07 li
179.051 316.731 li
187.938 317.048 li
238.293 314.874 li
261.989 315.061 li
273.837 315.443 li
291.609 315.824 li
327.154 316.325 li
341.964 315.979 li
356.775 315.896 li
371.585 315.268 li
392.319 315.299 li
424.901 315.508 li
481.18 316.125 li
493.029 315.789 li
510.801 315.174 li
534.498 315.289 li
549.307 315.313 li
644.093 316.264 li
658.904 316.058 li
676.675 315.887 li
697.41 315.585 li
735.917 315.489 li
792.196 315.984 li
851.437 315.74 li
910.677 316.146 li
.84448 .400854 1 .406714 cmyk
@
0 lc
[6 6 ] 0 dsh
25.0254 315.547 mo
915.121 315.547 li
1 /0 /CSD get_res sepcs
1 sep
@
2 lc
[] 0 dsh
25.0254 305.004 mo
30.9494 304.052 li
36.8734 302.5 li
42.7974 300.272 li
48.7214 297.406 li
57.6084 292.249 li
69.4564 284.424 li
81.3044 276.276 li
87.2284 273.073 li
96.1144 269.302 li
102.038 267.681 li
107.962 267.319 li
113.886 267.895 li
119.81 269.189 li
125.734 271.349 li
140.545 278.639 li
146.469 282.556 li
152.393 286.66 li
155.355 288.241 li
161.279 290.341 li
176.089 294.526 li
182.013 295.128 li
187.938 294.802 li
193.862 293.672 li
199.786 291.651 li
205.71 288.63 li
214.596 283.771 li
238.293 272.426 li
244.216 270.603 li
250.141 269.358 li
256.065 268.776 li
261.989 268.931 li
273.837 270.092 li
279.761 271.297 li
285.685 273.332 li
300.496 279.302 li
318.268 284.909 li
324.192 286.408 li
330.116 287.277 li
336.04 287.483 li
341.964 287.155 li
347.888 286.32 li
356.775 284.189 li
371.585 279.602 li
383.433 275.349 li
392.319 273.346 li
404.167 271.104 li
413.053 270.41 li
421.94 270.126 li
427.864 270.483 li
433.788 271.608 li
445.636 274.523 li
478.218 279.846 li
487.104 280.773 li
493.029 280.815 li
519.687 278.771 li
525.611 277.579 li
537.46 274.672 li
552.27 272.311 li
567.08 270.861 li
575.966 270.414 li
584.852 270.71 li
593.739 271.698 li
602.625 272.901 li
620.397 274.237 li
632.245 275.704 li
644.093 276.055 li
664.828 275.995 li
679.638 275.754 li
688.524 274.707 li
703.335 272.654 li
721.106 271.462 li
747.765 270.574 li
759.613 271.284 li
804.044 273.487 li
827.741 273.089 li
872.171 271.189 li
901.792 269.862 li
910.677 269.599 li
.84448 .400854 1 .406714 cmyk
@
0 lc
[6 6 ] 0 dsh
25.0254 305.57 mo
30.9494 304.28 li
36.8734 302.042 li
42.7974 298.981 li
50.2024 294.281 li
62.0504 285.741 li
72.4184 278.486 li
79.8234 274.091 li
85.7474 271.304 li
91.6714 269.299 li
97.5954 268.149 li
103.519 267.881 li
109.443 268.468 li
115.367 269.846 li
121.292 271.903 li
128.696 275.213 li
140.545 281.421 li
152.393 287.473 li
159.798 290.575 li
165.722 292.462 li
171.646 293.717 li
177.57 294.287 li
183.495 294.154 li
189.419 293.341 li
195.343 291.907 li
202.748 289.379 li
211.634 285.581 li
235.33 274.902 li
242.735 272.407 li
250.141 270.662 li
256.065 269.878 li
261.989 269.658 li
267.913 269.99 li
275.318 271.113 li
282.723 272.888 li
293.09 276.108 li
313.825 282.82 li
322.711 284.894 li
330.116 285.965 li
337.521 286.35 li
344.926 286.036 li
352.331 285.064 li
361.217 283.171 li
373.066 279.829 li
393.8 273.785 li
402.686 271.875 li
411.572 270.674 li
418.978 270.288 li
427.864 270.556 li
436.75 271.539 li
447.117 273.355 li
479.7 279.666 li
488.586 280.533 li
497.471 280.771 li
506.358 280.369 li
516.725 279.177 li
530.054 276.847 li
556.713 271.944 li
567.08 270.774 li
577.447 270.283 li
587.814 270.491 li
599.663 271.459 li
617.435 273.735 li
636.688 276.015 li
648.537 276.745 li
660.384 276.757 li
672.233 276.067 li
687.043 274.476 li
719.626 270.704 li
732.955 270.015 li
746.284 270.069 li
761.094 270.867 li
807.006 273.982 li
821.816 273.909 li
838.108 273.062 li
889.943 269.582 li
906.235 269.589 li
915.121 269.858 li
1 /0 /CSD get_res sepcs
1 sep
@
2 lc
[] 0 dsh
25.0254 257.872 mo
36.8734 264.38 li
42.7974 266.761 li
48.7214 268.36 li
54.6454 269.306 li
60.5694 269.452 li
69.4564 268.568 li
78.3424 267.346 li
84.2664 265.888 li
102.038 259.963 li
110.924 256.098 li
119.81 252.279 li
125.734 250.51 li
137.583 248.01 li
143.507 247.15 li
149.431 247.129 li
155.355 247.903 li
167.203 250.499 li
173.128 252.249 li
182.013 255.854 li
190.9 259.264 li
208.672 264.906 li
214.596 266.329 li
220.52 267.05 li
229.406 267.164 li
238.293 266.465 li
247.178 264.979 li
256.065 262.762 li
291.609 252.335 li
300.496 251.047 li
306.42 250.744 li
312.344 250.893 li
318.268 251.523 li
344.926 256.434 li
365.661 262.312 li
374.546 263.663 li
383.433 264.258 li
392.319 264.247 li
401.205 263.465 li
410.091 261.789 li
421.94 259.481 li
433.788 257.319 li
448.598 254.536 li
457.484 253.547 li
463.408 253.359 li
472.295 253.976 li
495.991 256.747 li
513.763 259.958 li
528.573 261.521 li
540.421 261.922 li
555.232 261.518 li
564.118 260.679 li
578.928 259.036 li
617.435 254.687 li
626.321 254.626 li
652.979 255.943 li
673.713 258.702 li
685.562 259.496 li
694.448 260.303 li
706.296 260.497 li
721.106 260.334 li
762.575 256.53 li
771.462 256.051 li
804.044 256.383 li
821.816 257.574 li
836.627 258.397 li
857.361 259.217 li
889.943 258.573 li
904.754 257.837 li
910.677 257.639 li
1 .929839 .320378 .338018 cmyk
@
0 lc
[6 6 ] 0 dsh
25.0254 256.475 mo
915.121 256.475 li
1 /0 /CSD get_res sepcs
1 sep
@
2 lc
[] 0 dsh
25.0254 228.135 mo
33.9114 231.879 li
42.7974 234.912 li
51.6834 237.033 li
60.5694 238.036 li
66.4944 238.218 li
72.4184 237.739 li
78.3424 236.328 li
90.1904 232.253 li
96.1144 229.486 li
105 225.049 li
110.924 223.239 li
119.81 220.884 li
128.696 217.941 li
134.621 216.862 li
140.545 216.694 li
149.431 217.491 li
158.317 219.133 li
170.165 222.314 li
176.089 224.409 li
190.9 230.672 li
199.786 233.044 li
208.672 234.629 li
214.596 235.059 li
223.482 234.823 li
229.406 234.096 li
235.33 232.686 li
259.027 224.967 li
267.913 222.12 li
273.837 221.111 li
294.571 219.274 li
300.496 219.504 li
309.381 220.487 li
318.268 222.309 li
336.04 226.963 li
359.736 231.454 li
368.623 232.387 li
374.546 232.371 li
383.433 231.265 li
404.167 228.053 li
413.053 225.559 li
418.978 224.745 li
433.788 223.69 li
442.674 223.028 li
454.522 223.049 li
463.408 223.778 li
481.18 226.099 li
493.029 227.575 li
507.838 229.328 li
522.649 229.885 li
534.498 229.604 li
558.194 228.357 li
578.928 226.111 li
608.548 225.32 li
617.435 225.703 li
638.17 227.386 li
682.6 228.79 li
694.448 228.542 li
712.22 228.104 li
724.069 227.447 li
735.917 226.931 li
786.272 227.158 li
804.044 227.642 li
836.627 228.289 li
872.171 228.238 li
895.868 228.102 li
910.677 227.968 li
1 .929839 .320378 .338018 cmyk
@
0 lc
[6 6 ] 0 dsh
25.0254 228.67 mo
33.9114 235.103 li
39.8354 238.715 li
45.7594 241.574 li
51.6834 243.552 li
56.1274 244.406 li
60.5694 244.706 li
65.0124 244.456 li
69.4564 243.677 li
75.3794 241.881 li
81.3044 239.338 li
88.7094 235.357 li
100.557 228.027 li
112.405 220.949 li
119.81 217.321 li
125.734 215.099 li
131.659 213.592 li
137.583 212.859 li
143.507 212.914 li
149.431 213.728 li
155.355 215.232 li
162.76 217.922 li
171.646 221.983 li
193.862 232.693 li
201.267 235.399 li
207.191 236.983 li
213.115 237.975 li
219.039 238.338 li
224.963 238.074 li
230.887 237.219 li
238.293 235.42 li
247.178 232.441 li
264.951 225.39 li
275.318 221.723 li
282.723 219.726 li
290.129 218.418 li
297.533 217.881 li
304.939 218.13 li
312.344 219.111 li
321.23 221.094 li
331.597 224.153 li
353.812 230.952 li
362.698 232.878 li
370.104 233.876 li
377.509 234.252 li
384.914 234.002 li
393.8 232.942 li
404.167 230.881 li
421.94 226.387 li
435.269 223.36 li
444.155 221.957 li
453.041 221.222 li
461.927 221.213 li
470.813 221.894 li
481.18 223.405 li
497.471 226.637 li
513.763 229.713 li
524.13 231.03 li
534.498 231.613 li
543.383 231.484 li
553.751 230.663 li
567.08 228.827 li
598.181 224.175 li
610.03 223.333 li
620.397 223.264 li
632.245 223.918 li
647.055 225.541 li
678.157 229.235 li
690.005 229.878 li
701.853 229.865 li
715.182 229.129 li
734.436 227.243 li
756.651 225.187 li
769.98 224.603 li
783.309 224.68 li
798.12 225.454 li
848.475 228.821 li
863.285 228.759 li
881.057 227.941 li
915.121 225.829 li
1 /0 /CSD get_res sepcs
1 sep
@
2 lc
[] 0 dsh
25.0254 199.456 mo
27.9874 202.073 li
30.9494 204.051 li
33.9114 205.249 li
36.8734 205.798 li
42.7974 205.842 li
63.5314 205.34 li
93.1524 204.745 li
116.848 203.355 li
125.734 203.105 li
134.621 202.92 li
146.469 201.985 li
176.089 201.554 li
232.368 200.331 li
259.027 199.159 li
273.837 199.545 li
291.609 199.141 li
341.964 199.367 li
353.812 199.653 li
371.585 199.152 li
386.395 198.695 li
401.205 198.998 li
416.015 198.21 li
433.788 198.284 li
454.522 197.91 li
469.333 197.752 li
484.142 197.829 li
537.46 197.717 li
561.156 197.442 li
570.042 197.354 li
590.776 196.865 li
608.548 196.737 li
626.321 196.338 li
647.055 196.507 li
658.904 196.293 li
691.486 196.166 li
712.22 195.791 li
724.069 195.846 li
738.879 196.021 li
762.575 195.817 li
804.044 195.461 li
821.816 195.305 li
839.588 195.137 li
851.437 194.928 li
869.21 195.242 li
889.943 195.08 li
901.792 195.176 li
910.677 194.702 li
1 .929839 .320378 .338018 cmyk
@
0 lc
[6 6 ] 0 dsh
25.0254 197.404 mo
915.121 197.404 li
1 /0 /CSD get_res sepcs
1 sep
@
2 lc
[] 0 dsh
25.0254 167.645 mo
33.9114 163.989 li
42.7974 160.98 li
51.6834 158.791 li
57.6084 157.891 li
63.5314 157.545 li
69.4564 157.947 li
75.3794 159.103 li
84.2664 161.63 li
90.1904 163.686 li
96.1144 166.411 li
105 170.662 li
110.924 172.532 li
119.81 175.06 li
128.696 177.921 li
134.621 179.022 li
140.545 179.244 li
149.431 178.768 li
155.355 177.962 li
164.241 175.738 li
176.089 172.002 li
187.938 167.435 li
196.824 164.29 li
202.748 162.88 li
208.672 162.015 li
217.558 161.46 li
223.482 161.534 li
229.406 162.166 li
235.33 163.467 li
247.178 167.072 li
267.913 173.444 li
279.761 175.318 li
288.647 176.48 li
294.571 176.687 li
303.458 176.183 li
312.344 175.186 li
318.268 173.978 li
339.002 168.426 li
356.775 165.056 li
365.661 163.954 li
371.585 163.733 li
380.471 164.299 li
398.243 166.398 li
404.167 167.919 li
413.053 170.529 li
418.978 171.433 li
433.788 172.891 li
439.712 173.451 li
445.636 173.468 li
463.408 172.408 li
481.18 170.372 li
490.067 169.186 li
507.838 166.298 li
513.763 166.103 li
549.307 167.004 li
558.194 167.824 li
573.004 169.553 li
599.663 170.509 li
626.321 169.63 li
676.675 167.399 li
694.448 167.688 li
753.689 169.187 li
807.006 168.365 li
818.854 168.103 li
845.512 167.962 li
872.171 167.846 li
886.981 168.084 li
904.754 168.028 li
910.677 168.472 li
1 .929839 .320378 .338018 cmyk
@
0 lc
[6 6 ] 0 dsh
25.0254 166.139 mo
33.9114 159.706 li
39.8354 156.094 li
45.7594 153.234 li
51.6834 151.257 li
56.1274 150.403 li
60.5694 150.103 li
65.0124 150.353 li
69.4564 151.132 li
75.3794 152.928 li
81.3044 155.472 li
88.7094 159.452 li
100.557 166.782 li
112.405 173.86 li
119.81 177.488 li
125.734 179.71 li
131.659 181.217 li
137.583 181.95 li
143.507 181.895 li
149.431 181.081 li
155.355 179.577 li
162.76 176.887 li
171.646 172.826 li
193.862 162.116 li
201.267 159.41 li
207.191 157.825 li
213.115 156.834 li
219.039 156.471 li
224.963 156.735 li
230.887 157.59 li
238.293 159.389 li
247.178 162.369 li
264.951 169.419 li
275.318 173.086 li
282.723 175.084 li
290.129 176.391 li
297.533 176.928 li
304.939 176.679 li
312.344 175.698 li
321.23 173.716 li
331.597 170.656 li
353.812 163.857 li
362.698 161.931 li
370.104 160.933 li
377.509 160.556 li
384.914 160.807 li
393.8 161.867 li
404.167 163.929 li
421.94 168.422 li
435.269 171.449 li
444.155 172.852 li
453.041 173.587 li
461.927 173.597 li
470.813 172.915 li
481.18 171.404 li
497.471 168.172 li
513.763 165.096 li
524.13 163.779 li
534.498 163.196 li
543.383 163.325 li
553.751 164.146 li
567.08 165.982 li
598.181 170.634 li
610.03 171.477 li
620.397 171.545 li
632.245 170.891 li
647.055 169.268 li
678.157 165.573 li
690.005 164.931 li
701.853 164.944 li
715.182 165.681 li
734.436 167.566 li
756.651 169.622 li
769.98 170.206 li
783.309 170.129 li
798.12 169.355 li
848.475 165.988 li
863.285 166.051 li
881.057 166.868 li
915.121 168.98 li
1 /0 /CSD get_res sepcs
1 sep
@
2 lc
[] 0 dsh
25.0254 139.894 mo
42.7974 147.816 li
48.7214 149.633 li
54.6454 150.743 li
60.5694 151.14 li
69.4564 150.652 li
78.3424 149.683 li
84.2664 148.342 li
93.1524 145.146 li
110.924 138.427 li
119.81 134.711 li
125.734 132.794 li
134.621 130.712 li
140.545 129.532 li
146.469 129.066 li
152.393 129.598 li
170.165 132.89 li
176.089 135.022 li
187.938 140.171 li
208.672 146.955 li
214.596 148.236 li
220.52 148.994 li
226.444 149.151 li
235.33 148.546 li
244.216 147.373 li
253.103 145.28 li
267.913 141.089 li
282.723 136.488 li
291.609 134.467 li
300.496 133.116 li
306.42 132.702 li
312.344 132.878 li
318.268 133.594 li
344.926 138.609 li
353.812 141.234 li
362.698 143.894 li
371.585 145.644 li
380.471 146.448 li
389.357 146.443 li
398.243 145.764 li
407.129 144.114 li
418.978 141.767 li
430.826 139.858 li
451.56 135.6 li
460.446 135.086 li
469.333 135.361 li
487.104 136.84 li
495.991 138.364 li
510.801 141.151 li
528.573 143.112 li
540.421 143.783 li
552.27 143.71 li
561.156 143.027 li
590.776 139.311 li
617.435 136.558 li
623.359 136.594 li
638.17 137.277 li
647.055 137.408 li
655.941 138.331 li
673.713 140.467 li
697.41 142.268 li
715.182 142.323 li
727.031 141.331 li
747.765 139.545 li
756.651 138.526 li
780.347 137.72 li
792.196 137.74 li
812.93 138.753 li
842.55 140.518 li
863.285 141.012 li
881.057 140.761 li
910.677 139.437 li
1 .929839 .320378 .338018 cmyk
@
0 lc
[6 6 ] 0 dsh
25.0254 138.333 mo
915.121 138.333 li
1 /0 /CSD get_res sepcs
1 sep
@
2 lc
[] 0 dsh
25.0254 111.303 mo
27.9874 113.64 li
30.9494 115.41 li
33.9114 116.456 li
36.8734 116.903 li
48.7214 116.841 li
84.2664 116.961 li
113.886 115.749 li
125.734 114.636 li
199.786 113.244 li
270.875 112.315 li
291.609 111.188 li
401.205 109.423 li
413.053 109.336 li
424.901 109.482 li
451.56 109.039 li
487.104 108.974 li
513.763 109.141 li
534.498 109.188 li
561.156 108.815 li
655.941 107.639 li
667.79 107.642 li
688.524 107.297 li
774.423 106.862 li
789.234 106.699 li
807.006 106.682 li
830.703 106.384 li
854.399 106.166 li
910.677 106.191 li
1 .929839 .320378 .338018 cmyk
@
0 lc
[6 6 ] 0 dsh
25.0254 108.798 mo
915.121 108.798 li
1 /0 /CSD get_res sepcs
1 sep
@
2 lc
[] 0 dsh
25.0254 80.9938 mo
27.9874 80.6658 li
30.9494 80.4548 li
42.7974 80.4138 li
72.4184 80.2958 li
84.2664 79.8678 li
116.848 80.1128 li
134.621 80.3758 li
146.469 80.5078 li
155.355 80.6868 li
176.089 80.3668 li
187.938 80.6768 li
205.71 80.3328 li
220.52 80.2638 li
232.368 80.4128 li
250.141 80.8098 li
282.723 80.4088 li
312.344 79.4678 li
321.23 79.3658 li
333.078 78.7228 li
344.926 79.1098 li
356.775 79.1608 li
371.585 78.7698 li
392.319 79.4508 li
401.205 79.6218 li
416.015 80.2638 li
469.333 80.1808 li
478.218 80.1668 li
490.067 80.2838 li
510.801 79.5658 li
528.573 79.7188 li
641.131 79.7768 li
661.866 79.5418 li
673.713 79.5518 li
685.562 79.4138 li
715.182 79.8688 li
783.309 79.8318 li
795.158 79.6028 li
833.665 79.7418 li
845.512 79.6978 li
857.361 79.8788 li
878.095 79.6718 li
910.677 79.7358 li
1 .929839 .320378 .338018 cmyk
@
0 lc
[6 6 ] 0 dsh
25.0254 79.2614 mo
915.121 79.2614 li
1 /0 /CSD get_res sepcs
1 sep
@
2 lc
[] 0 dsh
25.0254 50.3532 mo
33.9114 49.6012 li
39.8354 49.0852 li
45.7594 49.0962 li
72.4184 50.2432 li
90.1904 50.1322 li
110.924 51.1092 li
119.81 51.2712 li
134.621 51.9942 li
146.469 51.7402 li
161.279 51.7012 li
176.089 50.8962 li
187.938 51.3992 li
220.52 50.3692 li
374.546 50.5152 li
383.433 50.9782 li
401.205 50.7412 li
501.915 49.7462 li
513.763 49.7372 li
534.498 50.1082 li
549.307 50.1152 li
605.587 50.6302 li
620.397 50.4262 li
635.208 50.8892 li
658.904 50.5002 li
676.675 50.3982 li
706.296 50.3592 li
718.144 50.1822 li
729.993 50.1402 li
750.727 50.3392 li
789.234 50.2232 li
804.044 50.1902 li
824.778 50.1462 li
857.361 50.2562 li
910.677 50.3202 li
1 .929839 .320378 .338018 cmyk
@
0 lc
[6 6 ] 0 dsh
25.0254 49.7262 mo
915.121 49.7262 li
1 /0 /CSD get_res sepcs
1 sep
@
2 lc
[] 0 dsh
25.0254 39.9874 mo
72.4184 37.0654 li
90.1904 35.8434 li
170.165 31.6424 li
193.862 30.1734 li
214.596 29.0334 li
226.444 28.6284 li
238.293 28.1524 li
250.141 27.6504 li
259.027 27.3824 li
270.875 27.1654 li
285.685 26.3054 li
303.458 25.4924 li
324.192 24.5594 li
359.736 23.3554 li
380.471 22.3104 li
493.029 18.8744 li
501.915 18.3414 li
510.801 18.5214 li
519.687 18.7204 li
534.498 17.9384 li
552.27 17.3644 li
570.042 17.0924 li
584.852 16.6534 li
605.587 16.3144 li
638.17 15.0564 li
652.979 14.8654 li
664.828 14.7244 li
691.486 14.2044 li
718.144 13.8344 li
738.879 13.6934 li
750.727 13.1644 li
768.5 12.8774 li
777.385 12.7214 li
795.158 12.7574 li
842.55 11.1214 li
910.677 10.2144 li
1 .929839 .320378 .338018 cmyk
@
0 lc
[6 6 ] 0 dsh
25.0254 39.7497 mo
164.241 31.8927 li
288.647 26.2417 li
368.623 23.2257 li
495.991 19.0197 li
645.574 15.0847 li
802.563 11.8557 li
915.121 9.99072 li
1 /0 /CSD get_res sepcs
1 sep
@
grestore
.5 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
25.0254 453.379 mo
25.0254 449.379 li
1 /0 /CSD get_res sepcs
1 sep
@
25.0254 .499695 mo
25.0254 4.49969 li
@
gsave
0 0 mo
928.387 0 li
928.387 493.277 li
0 493.277 li
cp
clp
29.9355 464.172 mo
29.9355 466.53 29.5935 468.258 28.9095 469.337 cv
28.2255 470.435 27.1815 470.975 25.7595 470.975 cv
24.3195 470.975 23.2575 470.435 22.5915 469.319 cv
21.9075 468.203 21.5835 466.493 21.5835 464.19 cv
21.5835 461.831 21.9075 460.103 22.5915 459.005 cv
23.2755 457.926 24.3195 457.367 25.7595 457.367 cv
27.1995 457.367 28.2435 457.944 28.9275 459.077 cv
29.5935 460.211 29.9355 461.904 29.9355 464.172 cv
27.6855 468.167 mo
27.8655 467.736 27.9735 467.195 28.0455 466.53 cv
28.1175 465.863 28.1535 465.072 28.1535 464.172 cv
28.1535 463.289 28.1175 462.516 28.0455 461.849 cv
27.9735 461.184 27.8655 460.625 27.6855 460.194 cv
27.5055 459.743 27.2535 459.401 26.9475 459.168 cv
26.6415 458.952 26.2455 458.826 25.7595 458.826 cv
25.2555 458.826 24.8595 458.952 24.5535 459.168 cv
24.2295 459.401 23.9955 459.743 23.8155 460.211 cv
23.6355 460.661 23.5095 461.219 23.4555 461.904 cv
23.3835 462.587 23.3655 463.344 23.3655 464.19 cv
23.3655 465.108 23.3835 465.882 23.4375 466.493 cv
23.4915 467.107 23.6175 467.663 23.8155 468.132 cv
23.9775 468.599 24.2115 468.943 24.5355 469.193 cv
24.8415 469.445 25.2555 469.553 25.7595 469.553 cv
26.2275 469.553 26.6235 469.445 26.9475 469.211 cv
27.2715 468.978 27.5055 468.635 27.6855 468.167 cv
f
173.128 453.379 mo
173.128 449.379 li
@
173.128 .499695 mo
173.128 4.49969 li
@
168.115 470.723 mo
161.725 470.723 li
161.725 469.391 li
164.101 469.391 li
164.101 460.608 li
161.725 460.608 li
161.725 459.419 li
162.625 459.419 163.273 459.293 163.705 459.041 cv
164.137 458.789 164.371 458.322 164.425 457.601 cv
165.793 457.601 li
165.793 469.391 li
168.115 469.391 li
168.115 470.723 li
f
178.663 464.172 mo
178.663 466.53 178.321 468.258 177.637 469.337 cv
176.953 470.435 175.909 470.975 174.487 470.975 cv
173.047 470.975 171.985 470.435 171.319 469.319 cv
170.635 468.203 170.311 466.493 170.311 464.19 cv
170.311 461.831 170.635 460.103 171.319 459.005 cv
172.003 457.926 173.047 457.367 174.487 457.367 cv
175.927 457.367 176.971 457.944 177.655 459.077 cv
178.321 460.211 178.663 461.904 178.663 464.172 cv
176.413 468.167 mo
176.593 467.736 176.701 467.195 176.773 466.53 cv
176.845 465.863 176.881 465.072 176.881 464.172 cv
176.881 463.289 176.845 462.516 176.773 461.849 cv
176.701 461.184 176.593 460.625 176.413 460.194 cv
176.233 459.743 175.981 459.401 175.675 459.168 cv
175.369 458.952 174.973 458.826 174.487 458.826 cv
173.983 458.826 173.587 458.952 173.281 459.168 cv
172.957 459.401 172.723 459.743 172.543 460.211 cv
172.363 460.661 172.237 461.219 172.183 461.904 cv
172.111 462.587 172.093 463.344 172.093 464.19 cv
172.093 465.108 172.111 465.882 172.165 466.493 cv
172.219 467.107 172.345 467.663 172.543 468.132 cv
172.705 468.599 172.939 468.943 173.263 469.193 cv
173.569 469.445 173.983 469.553 174.487 469.553 cv
174.955 469.553 175.351 469.445 175.675 469.211 cv
175.999 468.978 176.233 468.635 176.413 468.167 cv
f
188.491 464.172 mo
188.491 466.53 188.149 468.258 187.465 469.337 cv
186.781 470.435 185.737 470.975 184.315 470.975 cv
182.875 470.975 181.813 470.435 181.147 469.319 cv
180.463 468.203 180.139 466.493 180.139 464.19 cv
180.139 461.831 180.463 460.103 181.147 459.005 cv
181.831 457.926 182.875 457.367 184.315 457.367 cv
185.755 457.367 186.799 457.944 187.483 459.077 cv
188.149 460.211 188.491 461.904 188.491 464.172 cv
186.241 468.167 mo
186.421 467.736 186.529 467.195 186.601 466.53 cv
186.673 465.863 186.709 465.072 186.709 464.172 cv
186.709 463.289 186.673 462.516 186.601 461.849 cv
186.529 461.184 186.421 460.625 186.241 460.194 cv
186.061 459.743 185.809 459.401 185.503 459.168 cv
185.197 458.952 184.801 458.826 184.315 458.826 cv
183.811 458.826 183.415 458.952 183.109 459.168 cv
182.785 459.401 182.551 459.743 182.371 460.211 cv
182.191 460.661 182.065 461.219 182.011 461.904 cv
181.939 462.587 181.921 463.344 181.921 464.19 cv
181.921 465.108 181.939 465.882 181.993 466.493 cv
182.047 467.107 182.173 467.663 182.371 468.132 cv
182.533 468.599 182.767 468.943 183.091 469.193 cv
183.397 469.445 183.811 469.553 184.315 469.553 cv
184.783 469.553 185.179 469.445 185.503 469.211 cv
185.827 468.978 186.061 468.635 186.241 468.167 cv
f
321.23 453.379 mo
321.23 449.379 li
@
321.23 .499695 mo
321.23 4.49969 li
@
316.368 470.739 mo
308.286 470.739 li
308.286 468.903 li
308.862 468.363 309.42 467.823 309.942 467.319 cv
310.446 466.815 310.95 466.294 311.454 465.754 cv
312.444 464.655 313.128 463.773 313.488 463.107 cv
313.848 462.46 314.028 461.775 314.028 461.073 cv
314.028 460.714 313.956 460.407 313.848 460.119 cv
313.74 459.849 313.578 459.615 313.38 459.435 cv
313.164 459.256 312.93 459.13 312.66 459.04 cv
312.39 458.949 312.102 458.895 311.796 458.895 cv
311.472 458.895 311.166 458.949 310.842 459.021 cv
310.518 459.093 310.212 459.201 309.924 459.309 cv
309.672 459.418 309.438 459.544 309.204 459.687 cv
308.97 459.832 308.79 459.939 308.664 460.029 cv
308.556 460.029 li
308.556 458.176 li
308.916 457.996 309.438 457.834 310.086 457.653 cv
310.734 457.473 311.346 457.384 311.922 457.384 cv
313.128 457.384 314.082 457.708 314.784 458.355 cv
315.468 459.004 315.828 459.885 315.828 460.983 cv
315.828 461.487 315.756 461.973 315.648 462.405 cv
315.522 462.838 315.36 463.252 315.144 463.611 cv
314.928 463.989 314.658 464.367 314.352 464.746 cv
314.046 465.124 313.722 465.483 313.398 465.843 cv
312.84 466.456 312.228 467.067 311.544 467.716 cv
310.86 468.363 310.338 468.867 309.942 469.246 cv
316.368 469.246 li
316.368 470.739 li
f
326.25 464.187 mo
326.25 466.545 325.908 468.273 325.224 469.353 cv
324.54 470.451 323.496 470.991 322.074 470.991 cv
320.634 470.991 319.572 470.451 318.906 469.335 cv
318.222 468.219 317.898 466.509 317.898 464.206 cv
317.898 461.847 318.222 460.119 318.906 459.021 cv
319.59 457.941 320.634 457.383 322.074 457.383 cv
323.514 457.383 324.558 457.959 325.242 459.093 cv
325.908 460.227 326.25 461.919 326.25 464.187 cv
324 468.183 mo
324.18 467.751 324.288 467.211 324.36 466.545 cv
324.432 465.879 324.468 465.087 324.468 464.187 cv
324.468 463.305 324.432 462.531 324.36 461.865 cv
324.288 461.199 324.18 460.641 324 460.209 cv
323.82 459.759 323.568 459.417 323.262 459.183 cv
322.956 458.967 322.56 458.841 322.074 458.841 cv
321.57 458.841 321.174 458.967 320.868 459.183 cv
320.544 459.417 320.31 459.759 320.13 460.227 cv
319.95 460.677 319.824 461.235 319.77 461.919 cv
319.698 462.603 319.68 463.359 319.68 464.206 cv
319.68 465.124 319.698 465.897 319.752 466.509 cv
319.806 467.122 319.932 467.679 320.13 468.147 cv
320.292 468.615 320.526 468.958 320.85 469.209 cv
321.156 469.461 321.57 469.569 322.074 469.569 cv
322.542 469.569 322.938 469.461 323.262 469.227 cv
323.586 468.993 323.82 468.651 324 468.183 cv
f
336.078 464.187 mo
336.078 466.545 335.736 468.273 335.052 469.353 cv
334.368 470.451 333.324 470.991 331.902 470.991 cv
330.462 470.991 329.4 470.451 328.734 469.335 cv
328.05 468.219 327.726 466.509 327.726 464.206 cv
327.726 461.847 328.05 460.119 328.734 459.021 cv
329.418 457.941 330.462 457.383 331.902 457.383 cv
333.342 457.383 334.386 457.959 335.07 459.093 cv
335.736 460.227 336.078 461.919 336.078 464.187 cv
333.828 468.183 mo
334.008 467.751 334.116 467.211 334.188 466.545 cv
334.26 465.879 334.296 465.087 334.296 464.187 cv
334.296 463.305 334.26 462.531 334.188 461.865 cv
334.116 461.199 334.008 460.641 333.828 460.209 cv
333.648 459.759 333.396 459.417 333.09 459.183 cv
332.784 458.967 332.388 458.841 331.902 458.841 cv
331.398 458.841 331.002 458.967 330.696 459.183 cv
330.372 459.417 330.138 459.759 329.958 460.227 cv
329.778 460.677 329.652 461.235 329.598 461.919 cv
329.526 462.603 329.508 463.359 329.508 464.206 cv
329.508 465.124 329.526 465.897 329.58 466.509 cv
329.634 467.122 329.76 467.679 329.958 468.147 cv
330.12 468.615 330.354 468.958 330.678 469.209 cv
330.984 469.461 331.398 469.569 331.902 469.569 cv
332.37 469.569 332.766 469.461 333.09 469.227 cv
333.414 468.993 333.648 468.651 333.828 468.183 cv
f
469.333 453.379 mo
469.333 449.379 li
@
469.333 .499695 mo
469.333 4.49969 li
@
459.888 458.895 mo
459.564 458.895 459.24 458.949 458.915 459.021 cv
458.592 459.093 458.285 459.201 457.997 459.309 cv
457.709 459.435 457.476 459.561 457.26 459.687 cv
457.043 459.813 456.864 459.939 456.701 460.047 cv
456.594 460.047 li
456.594 458.193 li
456.972 457.996 457.493 457.815 458.142 457.635 cv
458.789 457.473 459.419 457.383 460.014 457.383 cv
460.608 457.383 461.13 457.456 461.562 457.563 cv
461.993 457.689 462.408 457.869 462.768 458.122 cv
463.146 458.409 463.434 458.751 463.632 459.147 cv
463.829 459.543 463.938 460.011 463.938 460.533 cv
463.938 461.253 463.686 461.901 463.218 462.441 cv
462.749 462.981 462.174 463.323 461.526 463.467 cv
461.526 463.593 li
461.796 463.647 462.083 463.737 462.408 463.863 cv
462.714 464.007 463.001 464.187 463.272 464.439 cv
463.541 464.691 463.758 465.015 463.938 465.411 cv
464.1 465.807 464.19 466.293 464.19 466.851 cv
464.19 467.445 464.081 467.985 463.884 468.489 cv
463.686 468.993 463.398 469.425 463.037 469.803 cv
462.642 470.199 462.192 470.505 461.652 470.703 cv
461.112 470.883 460.499 470.991 459.816 470.991 cv
459.15 470.991 458.501 470.901 457.854 470.757 cv
457.205 470.613 456.665 470.433 456.234 470.199 cv
456.234 468.345 li
456.36 468.345 li
456.72 468.633 457.224 468.885 457.835 469.137 cv
458.448 469.389 459.077 469.498 459.707 469.498 cv
460.068 469.498 460.428 469.443 460.787 469.335 cv
461.148 469.227 461.436 469.029 461.688 468.759 cv
461.921 468.507 462.102 468.237 462.228 467.914 cv
462.335 467.607 462.408 467.211 462.408 466.725 cv
462.408 466.257 462.335 465.879 462.192 465.573 cv
462.048 465.267 461.867 465.015 461.634 464.835 cv
461.382 464.673 461.076 464.547 460.751 464.475 cv
460.409 464.403 460.05 464.367 459.654 464.367 cv
458.915 464.367 li
458.915 462.909 li
459.492 462.909 li
460.284 462.909 460.913 462.729 461.417 462.351 cv
461.904 461.991 462.156 461.433 462.156 460.713 cv
462.156 460.389 462.083 460.119 461.957 459.867 cv
461.831 459.633 461.669 459.453 461.472 459.309 cv
461.255 459.166 461.003 459.057 460.734 458.985 cv
460.464 458.931 460.176 458.895 459.888 458.895 cv
f
474.306 464.187 mo
474.306 466.545 473.964 468.273 473.28 469.353 cv
472.596 470.451 471.552 470.991 470.13 470.991 cv
468.69 470.991 467.628 470.451 466.962 469.335 cv
466.278 468.219 465.953 466.509 465.953 464.206 cv
465.953 461.847 466.278 460.119 466.962 459.021 cv
467.646 457.941 468.69 457.383 470.13 457.383 cv
471.57 457.383 472.614 457.959 473.298 459.093 cv
473.964 460.227 474.306 461.919 474.306 464.187 cv
472.056 468.183 mo
472.236 467.751 472.344 467.211 472.415 466.545 cv
472.488 465.879 472.524 465.087 472.524 464.187 cv
472.524 463.305 472.488 462.531 472.415 461.865 cv
472.344 461.199 472.236 460.641 472.056 460.209 cv
471.875 459.759 471.623 459.417 471.318 459.183 cv
471.012 458.967 470.616 458.841 470.13 458.841 cv
469.625 458.841 469.23 458.967 468.924 459.183 cv
468.6 459.417 468.366 459.759 468.186 460.227 cv
468.006 460.677 467.88 461.235 467.826 461.919 cv
467.754 462.603 467.736 463.359 467.736 464.206 cv
467.736 465.124 467.754 465.897 467.808 466.509 cv
467.862 467.122 467.988 467.679 468.186 468.147 cv
468.348 468.615 468.581 468.958 468.906 469.209 cv
469.212 469.461 469.625 469.569 470.13 469.569 cv
470.598 469.569 470.993 469.461 471.318 469.227 cv
471.642 468.993 471.875 468.651 472.056 468.183 cv
f
484.134 464.187 mo
484.134 466.545 483.792 468.273 483.108 469.353 cv
482.424 470.451 481.38 470.991 479.958 470.991 cv
478.518 470.991 477.456 470.451 476.79 469.335 cv
476.106 468.219 475.781 466.509 475.781 464.206 cv
475.781 461.847 476.106 460.119 476.79 459.021 cv
477.474 457.941 478.518 457.383 479.958 457.383 cv
481.398 457.383 482.442 457.959 483.126 459.093 cv
483.792 460.227 484.134 461.919 484.134 464.187 cv
481.884 468.183 mo
482.064 467.751 482.172 467.211 482.243 466.545 cv
482.316 465.879 482.352 465.087 482.352 464.187 cv
482.352 463.305 482.316 462.531 482.243 461.865 cv
482.172 461.199 482.064 460.641 481.884 460.209 cv
481.703 459.759 481.451 459.417 481.146 459.183 cv
480.84 458.967 480.444 458.841 479.958 458.841 cv
479.453 458.841 479.058 458.967 478.752 459.183 cv
478.428 459.417 478.194 459.759 478.014 460.227 cv
477.834 460.677 477.708 461.235 477.654 461.919 cv
477.582 462.603 477.564 463.359 477.564 464.206 cv
477.564 465.124 477.582 465.897 477.636 466.509 cv
477.69 467.122 477.816 467.679 478.014 468.147 cv
478.176 468.615 478.409 468.958 478.734 469.209 cv
479.04 469.461 479.453 469.569 479.958 469.569 cv
480.426 469.569 480.821 469.461 481.146 469.227 cv
481.47 468.993 481.703 468.651 481.884 468.183 cv
f
617.435 453.379 mo
617.435 449.379 li
@
617.435 .499695 mo
617.435 4.49969 li
@
612.618 466.223 mo
611.07 466.223 li
611.07 470.723 li
609.378 470.723 li
609.378 466.223 li
603.599 466.223 li
603.599 464.369 li
609.45 457.637 li
611.07 457.637 li
611.07 464.82 li
612.618 464.82 li
612.618 466.223 li
609.378 464.82 mo
609.378 459.707 li
604.968 464.82 li
cp
f
622.158 464.172 mo
622.158 466.53 621.816 468.258 621.132 469.337 cv
620.448 470.435 619.404 470.975 617.982 470.975 cv
616.542 470.975 615.479 470.435 614.813 469.319 cv
614.13 468.203 613.805 466.493 613.805 464.19 cv
613.805 461.831 614.13 460.103 614.813 459.005 cv
615.498 457.926 616.542 457.367 617.982 457.367 cv
619.422 457.367 620.466 457.944 621.15 459.077 cv
621.816 460.211 622.158 461.904 622.158 464.172 cv
619.908 468.167 mo
620.088 467.736 620.196 467.195 620.267 466.53 cv
620.34 465.863 620.376 465.072 620.376 464.172 cv
620.376 463.289 620.34 462.516 620.267 461.849 cv
620.196 461.184 620.088 460.625 619.908 460.194 cv
619.727 459.743 619.475 459.401 619.17 459.168 cv
618.864 458.952 618.468 458.826 617.982 458.826 cv
617.477 458.826 617.082 458.952 616.776 459.168 cv
616.452 459.401 616.218 459.743 616.038 460.211 cv
615.858 460.661 615.732 461.219 615.678 461.904 cv
615.606 462.587 615.588 463.344 615.588 464.19 cv
615.588 465.108 615.606 465.882 615.66 466.493 cv
615.714 467.107 615.84 467.663 616.038 468.132 cv
616.2 468.599 616.433 468.943 616.758 469.193 cv
617.063 469.445 617.477 469.553 617.982 469.553 cv
618.45 469.553 618.845 469.445 619.17 469.211 cv
619.494 468.978 619.727 468.635 619.908 468.167 cv
f
631.986 464.172 mo
631.986 466.53 631.643 468.258 630.96 469.337 cv
630.276 470.435 629.232 470.975 627.809 470.975 cv
626.37 470.975 625.307 470.435 624.641 469.319 cv
623.958 468.203 623.633 466.493 623.633 464.19 cv
623.633 461.831 623.958 460.103 624.641 459.005 cv
625.326 457.926 626.37 457.367 627.809 457.367 cv
629.25 457.367 630.294 457.944 630.977 459.077 cv
631.643 460.211 631.986 461.904 631.986 464.172 cv
629.736 468.167 mo
629.916 467.736 630.024 467.195 630.095 466.53 cv
630.168 465.863 630.204 465.072 630.204 464.172 cv
630.204 463.289 630.168 462.516 630.095 461.849 cv
630.024 461.184 629.916 460.625 629.736 460.194 cv
629.555 459.743 629.303 459.401 628.998 459.168 cv
628.692 458.952 628.296 458.826 627.809 458.826 cv
627.305 458.826 626.91 458.952 626.604 459.168 cv
626.28 459.401 626.046 459.743 625.866 460.211 cv
625.686 460.661 625.559 461.219 625.506 461.904 cv
625.434 462.587 625.416 463.344 625.416 464.19 cv
625.416 465.108 625.434 465.882 625.488 466.493 cv
625.542 467.107 625.668 467.663 625.866 468.132 cv
626.028 468.599 626.261 468.943 626.586 469.193 cv
626.891 469.445 627.305 469.553 627.809 469.553 cv
628.278 469.553 628.673 469.445 628.998 469.211 cv
629.322 468.978 629.555 468.635 629.736 468.167 cv
f
765.538 453.379 mo
765.538 449.379 li
@
765.538 .499695 mo
765.538 4.49969 li
@
760.602 466.566 mo
760.602 467.196 760.494 467.772 760.296 468.311 cv
760.08 468.851 759.81 469.32 759.45 469.715 cv
759.072 470.112 758.604 470.435 758.064 470.652 cv
757.524 470.868 756.912 470.975 756.228 470.975 cv
755.598 470.975 754.986 470.904 754.374 470.778 cv
753.762 470.652 753.24 470.471 752.808 470.255 cv
752.808 468.402 li
752.916 468.402 li
753.06 468.509 753.258 468.618 753.51 468.744 cv
753.762 468.87 754.032 468.977 754.338 469.086 cv
754.68 469.212 755.004 469.301 755.292 469.374 cv
755.58 469.446 755.886 469.482 756.246 469.482 cv
756.606 469.482 756.948 469.427 757.272 469.301 cv
757.596 469.175 757.884 468.96 758.136 468.671 cv
758.352 468.42 758.514 468.131 758.64 467.772 cv
758.748 467.429 758.82 467.015 758.82 466.547 cv
758.82 466.08 758.748 465.702 758.623 465.414 cv
758.496 465.126 758.316 464.874 758.082 464.675 cv
757.83 464.46 757.506 464.297 757.146 464.208 cv
756.768 464.118 756.354 464.064 755.922 464.064 cv
755.436 464.064 754.95 464.099 754.482 464.171 cv
753.996 464.244 753.618 464.316 753.33 464.37 cv
753.33 457.637 li
760.512 457.637 li
760.512 459.168 li
755.04 459.168 li
755.04 462.66 li
755.238 462.641 755.436 462.624 755.652 462.606 cv
755.85 462.606 756.03 462.587 756.21 462.587 cv
756.876 462.587 757.434 462.641 757.902 462.75 cv
758.37 462.858 758.82 463.074 759.252 463.398 cv
759.684 463.74 760.008 464.154 760.242 464.639 cv
760.476 465.143 760.602 465.774 760.602 466.566 cv
f
770.628 464.172 mo
770.628 466.53 770.286 468.258 769.602 469.337 cv
768.918 470.435 767.874 470.975 766.452 470.975 cv
765.012 470.975 763.95 470.435 763.284 469.319 cv
762.6 468.203 762.275 466.493 762.275 464.19 cv
762.275 461.831 762.6 460.103 763.284 459.005 cv
763.968 457.926 765.012 457.367 766.452 457.367 cv
767.892 457.367 768.936 457.944 769.62 459.077 cv
770.286 460.211 770.628 461.904 770.628 464.172 cv
768.378 468.167 mo
768.558 467.736 768.666 467.195 768.737 466.53 cv
768.81 465.863 768.846 465.072 768.846 464.172 cv
768.846 463.289 768.81 462.516 768.737 461.849 cv
768.666 461.184 768.558 460.625 768.378 460.194 cv
768.197 459.743 767.945 459.401 767.64 459.168 cv
767.334 458.952 766.938 458.826 766.452 458.826 cv
765.947 458.826 765.552 458.952 765.246 459.168 cv
764.922 459.401 764.688 459.743 764.508 460.211 cv
764.328 460.661 764.202 461.219 764.148 461.904 cv
764.076 462.587 764.058 463.344 764.058 464.19 cv
764.058 465.108 764.076 465.882 764.13 466.493 cv
764.184 467.107 764.31 467.663 764.508 468.132 cv
764.67 468.599 764.903 468.943 765.228 469.193 cv
765.534 469.445 765.947 469.553 766.452 469.553 cv
766.92 469.553 767.315 469.445 767.64 469.211 cv
767.964 468.978 768.197 468.635 768.378 468.167 cv
f
780.456 464.172 mo
780.456 466.53 780.114 468.258 779.43 469.337 cv
778.746 470.435 777.702 470.975 776.28 470.975 cv
774.84 470.975 773.777 470.435 773.111 469.319 cv
772.428 468.203 772.103 466.493 772.103 464.19 cv
772.103 461.831 772.428 460.103 773.111 459.005 cv
773.796 457.926 774.84 457.367 776.28 457.367 cv
777.72 457.367 778.764 457.944 779.448 459.077 cv
780.114 460.211 780.456 461.904 780.456 464.172 cv
778.206 468.167 mo
778.386 467.736 778.494 467.195 778.565 466.53 cv
778.638 465.863 778.674 465.072 778.674 464.172 cv
778.674 463.289 778.638 462.516 778.565 461.849 cv
778.494 461.184 778.386 460.625 778.206 460.194 cv
778.025 459.743 777.773 459.401 777.468 459.168 cv
777.162 458.952 776.766 458.826 776.28 458.826 cv
775.775 458.826 775.38 458.952 775.074 459.168 cv
774.75 459.401 774.516 459.743 774.336 460.211 cv
774.155 460.661 774.03 461.219 773.976 461.904 cv
773.903 462.587 773.886 463.344 773.886 464.19 cv
773.886 465.108 773.903 465.882 773.958 466.493 cv
774.012 467.107 774.138 467.663 774.336 468.132 cv
774.498 468.599 774.731 468.943 775.056 469.193 cv
775.361 469.445 775.775 469.553 776.28 469.553 cv
776.748 469.553 777.143 469.445 777.468 469.211 cv
777.792 468.978 778.025 468.635 778.206 468.167 cv
f
913.64 453.379 mo
913.64 449.379 li
@
913.64 .499695 mo
913.64 4.49969 li
@
908.874 466.475 mo
908.874 467.16 908.748 467.772 908.532 468.347 cv
908.316 468.923 908.011 469.391 907.65 469.769 cv
907.254 470.165 906.804 470.471 906.318 470.669 cv
905.832 470.868 905.292 470.975 904.716 470.975 cv
904.122 470.975 903.582 470.868 903.097 470.687 cv
902.61 470.507 902.196 470.202 901.836 469.805 cv
901.368 469.337 901.026 468.707 900.774 467.915 cv
900.522 467.123 900.396 466.133 900.396 464.982 cv
900.396 463.847 900.504 462.822 900.738 461.904 cv
900.972 460.986 901.332 460.175 901.818 459.492 cv
902.286 458.843 902.898 458.322 903.654 457.944 cv
904.41 457.583 905.274 457.385 906.265 457.385 cv
906.552 457.385 906.822 457.404 907.074 457.44 cv
907.326 457.475 907.542 457.511 907.74 457.583 cv
907.74 459.257 li
907.668 459.257 li
907.506 459.167 907.272 459.078 906.984 459.005 cv
906.679 458.933 906.354 458.898 906.013 458.898 cv
904.933 458.898 904.05 459.276 903.384 460.013 cv
902.7 460.751 902.304 461.831 902.196 463.272 cv
902.592 462.984 903.024 462.767 903.475 462.606 cv
903.906 462.461 904.393 462.371 904.914 462.371 cv
905.418 462.371 905.851 462.425 906.246 462.534 cv
906.624 462.641 907.02 462.839 907.452 463.145 cv
907.92 463.505 908.28 463.973 908.515 464.532 cv
908.748 465.089 908.874 465.738 908.874 466.475 cv
907.092 466.547 mo
907.092 466.007 907.02 465.557 906.876 465.198 cv
906.732 464.837 906.517 464.532 906.192 464.261 cv
905.958 464.081 905.706 463.955 905.418 463.902 cv
905.13 463.847 904.824 463.811 904.519 463.811 cv
904.104 463.811 903.708 463.883 903.33 463.992 cv
902.935 464.118 902.557 464.297 902.196 464.532 cv
902.179 464.675 902.16 464.801 902.16 464.91 cv
902.16 465.36 li
902.16 466.259 902.232 466.997 902.412 467.555 cv
902.592 468.114 902.809 468.528 903.078 468.816 cv
903.33 469.103 903.582 469.301 903.853 469.41 cv
904.122 469.517 904.41 469.572 904.734 469.572 cv
905.418 469.572 905.994 469.32 906.426 468.816 cv
906.858 468.311 907.092 467.555 907.092 466.547 cv
f
918.559 464.172 mo
918.559 466.53 918.216 468.258 917.533 469.337 cv
916.849 470.435 915.805 470.975 914.382 470.975 cv
912.943 470.975 911.88 470.435 911.214 469.319 cv
910.531 468.203 910.206 466.493 910.206 464.19 cv
910.206 461.831 910.531 460.103 911.214 459.005 cv
911.899 457.926 912.943 457.367 914.382 457.367 cv
915.823 457.367 916.867 457.944 917.55 459.077 cv
918.216 460.211 918.559 461.904 918.559 464.172 cv
916.309 468.167 mo
916.489 467.736 916.597 467.195 916.668 466.53 cv
916.741 465.863 916.777 465.072 916.777 464.172 cv
916.777 463.289 916.741 462.516 916.668 461.849 cv
916.597 461.184 916.489 460.625 916.309 460.194 cv
916.128 459.743 915.876 459.401 915.571 459.168 cv
915.265 458.952 914.869 458.826 914.382 458.826 cv
913.878 458.826 913.483 458.952 913.177 459.168 cv
912.853 459.401 912.619 459.743 912.439 460.211 cv
912.259 460.661 912.132 461.219 912.079 461.904 cv
912.006 462.587 911.989 463.344 911.989 464.19 cv
911.989 465.108 912.006 465.882 912.061 466.493 cv
912.115 467.107 912.241 467.663 912.439 468.132 cv
912.601 468.599 912.834 468.943 913.159 469.193 cv
913.464 469.445 913.878 469.553 914.382 469.553 cv
914.851 469.553 915.246 469.445 915.571 469.211 cv
915.895 468.978 916.128 468.635 916.309 468.167 cv
f
928.387 464.172 mo
928.387 466.53 928.044 468.258 927.361 469.337 cv
926.677 470.435 925.633 470.975 924.21 470.975 cv
922.771 470.975 921.708 470.435 921.042 469.319 cv
920.359 468.203 920.034 466.493 920.034 464.19 cv
920.034 461.831 920.359 460.103 921.042 459.005 cv
921.727 457.926 922.771 457.367 924.21 457.367 cv
925.651 457.367 926.695 457.944 927.378 459.077 cv
928.044 460.211 928.387 461.904 928.387 464.172 cv
926.137 468.167 mo
926.317 467.736 926.425 467.195 926.496 466.53 cv
926.569 465.863 926.605 465.072 926.605 464.172 cv
926.605 463.289 926.569 462.516 926.496 461.849 cv
926.425 461.184 926.317 460.625 926.137 460.194 cv
925.956 459.743 925.704 459.401 925.399 459.168 cv
925.093 458.952 924.697 458.826 924.21 458.826 cv
923.706 458.826 923.311 458.952 923.005 459.168 cv
922.681 459.401 922.447 459.743 922.267 460.211 cv
922.087 460.661 921.96 461.219 921.907 461.904 cv
921.834 462.587 921.817 463.344 921.817 464.19 cv
921.817 465.108 921.834 465.882 921.889 466.493 cv
921.943 467.107 922.069 467.663 922.267 468.132 cv
922.429 468.599 922.662 468.943 922.987 469.193 cv
923.292 469.445 923.706 469.553 924.21 469.553 cv
924.679 469.553 925.074 469.445 925.399 469.211 cv
925.723 468.978 925.956 468.635 926.137 468.167 cv
f
399.224 489.893 mo
398.558 489.893 397.946 489.802 397.37 489.64 cv
396.794 489.479 396.326 489.298 395.966 489.082 cv
395.966 487.229 li
396.056 487.229 li
396.182 487.355 396.344 487.481 396.542 487.607 cv
396.722 487.75 396.974 487.876 397.298 488.021 cv
397.586 488.164 397.892 488.273 398.234 488.38 cv
398.558 488.489 398.918 488.525 399.278 488.525 cv
399.53 488.525 399.818 488.506 400.124 488.435 cv
400.412 488.363 400.646 488.29 400.79 488.183 cv
400.988 488.056 401.132 487.913 401.222 487.769 cv
401.312 487.624 401.366 487.39 401.366 487.067 cv
401.366 486.689 401.258 486.401 401.042 486.203 cv
400.826 486.004 400.448 485.825 399.908 485.68 cv
399.692 485.645 399.422 485.573 399.08 485.5 cv
398.738 485.428 398.432 485.357 398.144 485.267 cv
397.388 485.05 396.848 484.727 396.506 484.277 cv
396.164 483.827 396.002 483.269 396.002 482.621 cv
396.002 481.739 396.326 481.019 396.992 480.46 cv
397.658 479.903 398.558 479.615 399.674 479.615 cv
400.214 479.615 400.754 479.687 401.312 479.83 cv
401.852 479.975 402.32 480.136 402.698 480.334 cv
402.698 482.098 li
402.608 482.098 li
402.176 481.775 401.708 481.504 401.204 481.306 cv
400.682 481.126 400.16 481.019 399.638 481.019 cv
399.08 481.019 398.612 481.145 398.252 481.361 cv
397.874 481.594 397.694 481.937 397.694 482.405 cv
397.694 482.819 397.802 483.124 398.018 483.323 cv
398.234 483.539 398.594 483.701 399.098 483.809 cv
399.35 483.88 399.62 483.953 399.926 484.006 cv
400.214 484.079 400.538 484.151 400.88 484.222 cv
401.6 484.403 402.14 484.708 402.5 485.122 cv
402.86 485.554 403.058 486.13 403.058 486.851 cv
403.058 487.283 402.968 487.678 402.806 488.056 cv
402.626 488.435 402.392 488.758 402.086 489.01 cv
401.726 489.317 401.312 489.533 400.88 489.676 cv
400.448 489.821 399.89 489.893 399.224 489.893 cv
f
416.504 479.867 mo
414.002 489.677 li
412.472 489.677 li
410.078 482.117 li
407.702 489.677 li
406.172 489.677 li
403.67 479.867 li
405.38 479.867 li
407.126 487.463 li
409.448 479.867 li
410.816 479.867 li
413.192 487.463 li
414.83 479.867 li
cp
f
423.434 487.264 mo
423.434 484.529 li
423.038 484.565 422.534 484.618 421.94 484.691 cv
421.329 484.762 420.86 484.834 420.5 484.943 cv
420.05 485.086 419.69 485.285 419.402 485.554 cv
419.114 485.842 418.97 486.22 418.97 486.725 cv
418.97 487.3 419.114 487.714 419.438 488.002 cv
419.762 488.29 420.23 488.435 420.842 488.435 cv
421.346 488.435 421.814 488.327 422.246 488.092 cv
422.66 487.876 423.056 487.588 423.434 487.264 cv
423.434 488.632 mo
423.29 488.741 423.11 488.867 422.894 489.046 cv
422.66 489.227 422.444 489.37 422.246 489.479 cv
421.94 489.622 421.652 489.712 421.382 489.802 cv
421.112 489.874 420.734 489.928 420.248 489.928 cv
419.834 489.928 419.456 489.857 419.096 489.712 cv
418.736 489.569 418.413 489.37 418.142 489.082 cv
417.872 488.813 417.656 488.47 417.494 488.075 cv
417.332 487.678 417.26 487.264 417.26 486.832 cv
417.26 486.149 417.404 485.573 417.692 485.105 cv
417.98 484.636 418.43 484.241 419.06 483.952 cv
419.6 483.701 420.248 483.538 421.004 483.43 cv
421.76 483.34 422.57 483.269 423.434 483.214 cv
423.434 482.909 li
423.434 482.512 423.362 482.206 423.254 481.972 cv
423.146 481.739 422.984 481.559 422.768 481.414 cv
422.552 481.288 422.282 481.199 421.994 481.145 cv
421.688 481.109 421.382 481.073 421.058 481.073 cv
420.663 481.073 420.212 481.145 419.708 481.252 cv
419.186 481.378 418.664 481.54 418.16 481.756 cv
418.07 481.756 li
418.07 480.065 li
418.358 479.993 418.79 479.884 419.366 479.777 cv
419.942 479.668 420.5 479.615 421.058 479.615 cv
421.724 479.615 422.3 479.668 422.768 479.777 cv
423.236 479.884 423.65 480.082 424.01 480.353 cv
424.371 480.622 424.622 480.964 424.802 481.397 cv
424.982 481.828 425.072 482.351 425.072 482.962 cv
425.072 489.676 li
423.434 489.676 li
423.434 488.632 li
f
435.638 484.51 mo
435.638 486.149 435.242 487.445 434.468 488.416 cv
433.676 489.388 432.686 489.857 431.498 489.857 cv
430.994 489.857 430.562 489.802 430.202 489.695 cv
429.824 489.586 429.446 489.424 429.05 489.191 cv
429.05 493.277 li
427.394 493.277 li
427.394 479.866 li
429.05 479.866 li
429.05 480.893 li
429.446 480.532 429.914 480.208 430.418 479.956 cv
430.922 479.704 431.462 479.578 432.056 479.578 cv
433.172 479.578 434.054 480.029 434.684 480.928 cv
435.314 481.828 435.638 483.017 435.638 484.51 cv
433.928 484.691 mo
433.928 483.574 433.748 482.71 433.388 482.098 cv
433.028 481.487 432.452 481.162 431.66 481.162 cv
431.192 481.162 430.724 481.271 430.292 481.487 cv
429.86 481.702 429.446 481.954 429.05 482.279 cv
429.05 487.84 li
429.482 488.056 429.842 488.2 430.166 488.273 cv
430.472 488.344 430.832 488.38 431.228 488.38 cv
432.074 488.38 432.74 488.074 433.208 487.445 cv
433.676 486.832 433.928 485.914 433.928 484.691 cv
f
450.542 489.676 mo
448.904 489.676 li
448.904 488.668 li
448.633 488.884 448.399 489.065 448.219 489.208 cv
448.039 489.353 447.823 489.496 447.572 489.605 cv
447.319 489.695 447.085 489.767 446.833 489.838 cv
446.581 489.893 446.275 489.928 445.951 489.928 cv
445.411 489.928 444.925 489.821 444.475 489.605 cv
444.007 489.388 443.629 489.065 443.323 488.632 cv
442.999 488.2 442.747 487.678 442.567 487.03 cv
442.387 486.401 442.315 485.662 442.315 484.834 cv
442.315 483.988 442.423 483.25 442.639 482.62 cv
442.855 481.99 443.179 481.433 443.576 480.964 cv
443.917 480.532 444.349 480.208 444.853 479.956 cv
445.357 479.704 445.897 479.578 446.455 479.578 cv
446.941 479.578 447.373 479.651 447.733 479.758 cv
448.093 479.866 448.49 480.046 448.904 480.262 cv
448.904 475.996 li
450.542 475.996 li
450.542 489.676 li
448.904 487.282 mo
448.904 481.63 li
448.471 481.433 448.111 481.288 447.787 481.216 cv
447.464 481.145 447.103 481.09 446.725 481.09 cv
445.879 481.09 445.214 481.414 444.745 482.044 cv
444.259 482.693 444.025 483.611 444.025 484.798 cv
444.025 485.968 444.205 486.851 444.565 487.462 cv
444.925 488.074 445.52 488.38 446.348 488.38 cv
446.779 488.38 447.211 488.29 447.643 488.092 cv
448.076 487.895 448.507 487.624 448.904 487.282 cv
f
460.586 489.676 mo
458.93 489.676 li
458.93 488.578 li
458.426 489.046 457.94 489.388 457.489 489.605 cv
457.022 489.821 456.518 489.928 455.96 489.928 cv
455.527 489.928 455.113 489.857 454.735 489.731 cv
454.357 489.605 454.034 489.388 453.764 489.065 cv
453.476 488.777 453.242 488.399 453.098 487.93 cv
452.954 487.462 452.881 486.905 452.881 486.238 cv
452.881 479.866 li
454.52 479.866 li
454.52 485.447 li
454.52 485.987 454.538 486.418 454.574 486.76 cv
454.609 487.103 454.7 487.39 454.844 487.643 cv
454.97 487.895 455.149 488.092 455.384 488.2 cv
455.617 488.326 455.96 488.38 456.392 488.38 cv
456.787 488.38 457.22 488.273 457.688 488.038 cv
458.138 487.822 458.552 487.534 458.93 487.193 cv
458.93 479.866 li
460.586 479.866 li
460.586 489.676 li
f
468.182 481.63 mo
468.11 481.63 li
467.966 481.594 467.84 481.577 467.696 481.577 cv
467.552 481.577 467.39 481.56 467.21 481.56 cv
466.76 481.56 466.31 481.667 465.878 481.846 cv
465.446 482.044 465.032 482.332 464.636 482.71 cv
464.636 489.676 li
462.98 489.676 li
462.98 479.866 li
464.636 479.866 li
464.636 481.324 li
465.23 480.784 465.752 480.406 466.202 480.191 cv
466.652 479.975 467.083 479.866 467.516 479.866 cv
467.696 479.866 467.822 479.884 467.911 479.884 cv
467.984 479.884 468.074 479.902 468.182 479.921 cv
468.182 481.63 li
f
474.949 487.264 mo
474.949 484.529 li
474.553 484.565 474.05 484.618 473.456 484.691 cv
472.844 484.762 472.376 484.834 472.015 484.943 cv
471.565 485.086 471.206 485.285 470.918 485.554 cv
470.63 485.842 470.485 486.22 470.485 486.725 cv
470.485 487.3 470.63 487.714 470.953 488.002 cv
471.277 488.29 471.745 488.435 472.357 488.435 cv
472.861 488.435 473.329 488.327 473.761 488.092 cv
474.176 487.876 474.571 487.588 474.949 487.264 cv
474.949 488.632 mo
474.805 488.741 474.626 488.867 474.409 489.046 cv
474.176 489.227 473.96 489.37 473.761 489.479 cv
473.456 489.622 473.168 489.712 472.897 489.802 cv
472.628 489.874 472.25 489.928 471.763 489.928 cv
471.349 489.928 470.971 489.857 470.611 489.712 cv
470.252 489.569 469.928 489.37 469.657 489.082 cv
469.387 488.813 469.172 488.47 469.01 488.075 cv
468.847 487.678 468.775 487.264 468.775 486.832 cv
468.775 486.149 468.92 485.573 469.208 485.105 cv
469.495 484.636 469.945 484.241 470.575 483.952 cv
471.115 483.701 471.763 483.538 472.519 483.43 cv
473.275 483.34 474.086 483.269 474.949 483.214 cv
474.949 482.909 li
474.949 482.512 474.878 482.206 474.769 481.972 cv
474.661 481.739 474.5 481.559 474.283 481.414 cv
474.067 481.288 473.798 481.199 473.51 481.145 cv
473.203 481.109 472.897 481.073 472.573 481.073 cv
472.178 481.073 471.727 481.145 471.223 481.252 cv
470.701 481.378 470.179 481.54 469.676 481.756 cv
469.586 481.756 li
469.586 480.065 li
469.874 479.993 470.305 479.884 470.882 479.777 cv
471.458 479.668 472.015 479.615 472.573 479.615 cv
473.239 479.615 473.815 479.668 474.283 479.777 cv
474.752 479.884 475.165 480.082 475.525 480.353 cv
475.886 480.622 476.137 480.964 476.317 481.397 cv
476.497 481.828 476.588 482.351 476.588 482.962 cv
476.588 489.676 li
474.949 489.676 li
474.949 488.632 li
f
481.88 489.857 mo
480.98 489.857 480.277 489.605 479.774 489.101 cv
479.27 488.596 479.018 487.787 479.018 486.67 cv
479.018 481.235 li
477.901 481.235 li
477.901 479.867 li
479.018 479.867 li
479.018 477.041 li
480.674 477.041 li
480.674 479.867 li
483.716 479.867 li
483.716 481.235 li
480.674 481.235 li
480.674 485.897 li
480.674 486.401 480.674 486.796 480.692 487.048 cv
480.709 487.319 480.781 487.571 480.907 487.804 cv
480.997 488.021 481.159 488.165 481.375 488.273 cv
481.592 488.38 481.898 488.417 482.294 488.417 cv
482.546 488.417 482.816 488.38 483.068 488.309 cv
483.319 488.237 483.499 488.165 483.625 488.111 cv
483.716 488.111 li
483.716 489.586 li
483.392 489.659 483.085 489.712 482.762 489.767 cv
482.438 489.821 482.15 489.857 481.88 489.857 cv
f
486.613 489.676 mo
484.957 489.676 li
484.957 479.866 li
486.613 479.866 li
cp
486.739 478.211 mo
484.849 478.211 li
484.849 476.501 li
486.739 476.501 li
cp
f
497.126 484.781 mo
497.126 486.437 496.712 487.697 495.92 488.596 cv
495.128 489.497 494.065 489.928 492.751 489.928 cv
491.384 489.928 490.304 489.479 489.529 488.543 cv
488.737 487.625 488.359 486.365 488.359 484.781 cv
488.359 483.143 488.756 481.865 489.565 480.947 cv
490.357 480.047 491.42 479.579 492.751 479.579 cv
494.065 479.579 495.128 480.047 495.92 480.947 cv
496.712 481.846 497.126 483.125 497.126 484.781 cv
495.415 484.781 mo
495.415 483.521 495.182 482.567 494.714 481.955 cv
494.245 481.343 493.598 481.019 492.751 481.019 cv
491.888 481.019 491.222 481.343 490.754 481.955 cv
490.285 482.567 490.069 483.521 490.069 484.781 cv
490.069 486.005 490.285 486.941 490.754 487.571 cv
491.222 488.219 491.888 488.525 492.751 488.525 cv
493.598 488.525 494.245 488.219 494.714 487.589 cv
495.182 486.977 495.415 486.041 495.415 484.781 cv
f
506.539 489.676 mo
504.884 489.676 li
504.884 484.078 li
504.884 483.647 504.848 483.233 504.811 482.836 cv
504.775 482.441 504.685 482.134 504.577 481.882 cv
504.434 481.649 504.254 481.468 504.002 481.342 cv
503.749 481.235 503.426 481.162 503.029 481.162 cv
502.615 481.162 502.184 481.271 501.752 481.487 cv
501.319 481.702 500.888 481.99 500.474 482.351 cv
500.474 489.676 li
498.817 489.676 li
498.817 479.866 li
500.474 479.866 li
500.474 480.947 li
500.96 480.514 501.445 480.191 501.932 479.939 cv
502.399 479.704 502.922 479.578 503.462 479.578 cv
504.415 479.578 505.172 479.903 505.712 480.532 cv
506.252 481.18 506.539 482.098 506.539 483.304 cv
506.539 489.676 li
f
519.338 493.096 mo
514.766 493.096 li
514.766 475.996 li
519.338 475.996 li
519.338 477.256 li
516.314 477.256 li
516.314 491.855 li
519.338 491.855 li
cp
f
529.111 489.676 mo
527.455 489.676 li
527.455 484.078 li
527.455 483.647 527.419 483.233 527.383 482.836 cv
527.347 482.441 527.257 482.134 527.149 481.882 cv
527.006 481.649 526.825 481.468 526.573 481.342 cv
526.321 481.235 525.997 481.162 525.601 481.162 cv
525.187 481.162 524.756 481.271 524.323 481.487 cv
523.891 481.702 523.459 481.99 523.046 482.351 cv
523.046 489.676 li
521.389 489.676 li
521.389 479.866 li
523.046 479.866 li
523.046 480.947 li
523.531 480.514 524.017 480.191 524.503 479.939 cv
524.971 479.704 525.493 479.578 526.033 479.578 cv
526.987 479.578 527.743 479.903 528.283 480.532 cv
528.823 481.18 529.111 482.098 529.111 483.304 cv
529.111 489.676 li
f
534.098 489.893 mo
533.432 489.893 532.82 489.802 532.244 489.64 cv
531.667 489.479 531.2 489.298 530.84 489.082 cv
530.84 487.229 li
530.93 487.229 li
531.056 487.355 531.218 487.481 531.415 487.607 cv
531.596 487.75 531.848 487.876 532.172 488.021 cv
532.459 488.164 532.766 488.273 533.108 488.38 cv
533.432 488.489 533.791 488.525 534.152 488.525 cv
534.404 488.525 534.692 488.506 534.997 488.435 cv
535.286 488.363 535.52 488.29 535.663 488.183 cv
535.862 488.056 536.006 487.913 536.096 487.769 cv
536.186 487.624 536.24 487.39 536.24 487.067 cv
536.24 486.689 536.132 486.401 535.915 486.203 cv
535.7 486.004 535.322 485.825 534.782 485.68 cv
534.566 485.645 534.296 485.573 533.953 485.5 cv
533.612 485.428 533.306 485.357 533.018 485.267 cv
532.262 485.05 531.722 484.727 531.38 484.277 cv
531.037 483.827 530.875 483.269 530.875 482.621 cv
530.875 481.739 531.2 481.019 531.866 480.46 cv
532.532 479.903 533.432 479.615 534.548 479.615 cv
535.087 479.615 535.628 479.687 536.186 479.83 cv
536.726 479.975 537.194 480.136 537.572 480.334 cv
537.572 482.098 li
537.482 482.098 li
537.05 481.775 536.581 481.504 536.077 481.306 cv
535.556 481.126 535.034 481.019 534.512 481.019 cv
533.953 481.019 533.486 481.145 533.125 481.361 cv
532.747 481.594 532.568 481.937 532.568 482.405 cv
532.568 482.819 532.676 483.124 532.892 483.323 cv
533.108 483.539 533.468 483.701 533.972 483.809 cv
534.224 483.88 534.494 483.953 534.8 484.006 cv
535.087 484.079 535.411 484.151 535.753 484.222 cv
536.474 484.403 537.014 484.708 537.373 485.122 cv
537.734 485.554 537.932 486.13 537.932 486.851 cv
537.932 487.283 537.842 487.678 537.68 488.056 cv
537.499 488.435 537.266 488.758 536.959 489.01 cv
536.6 489.317 536.186 489.533 535.753 489.676 cv
535.322 489.821 534.764 489.893 534.098 489.893 cv
f
543.709 493.096 mo
539.138 493.096 li
539.138 491.855 li
542.161 491.855 li
542.161 477.256 li
539.138 477.256 li
539.138 475.996 li
543.709 475.996 li
cp
f
25.0254 433.689 mo
29.0254 433.689 li
@
913.64 433.689 mo
909.64 433.689 li
@
15.1299 440.236 mo
13.1319 440.236 li
9.9459 434.999 li
6.6879 440.236 li
4.8159 440.236 li
8.9739 433.684 li
4.9419 427.15 li
6.9219 427.15 li
10.0539 432.298 li
13.2219 427.15 li
15.1119 427.15 li
11.0259 433.594 li
cp
f
21.106 440.236 mo
16.012 440.236 li
16.012 438.904 li
17.686 438.904 li
17.686 428.482 li
16.012 428.482 li
16.012 427.15 li
21.106 427.15 li
21.106 428.482 li
19.432 428.482 li
19.432 438.904 li
21.106 438.904 li
cp
f
25.0254 404.154 mo
29.0254 404.154 li
@
913.64 404.154 mo
909.64 404.154 li
@
15.144 397.615 mo
10.716 404.905 li
10.716 410.701 li
8.97 410.701 li
8.97 405.085 li
4.578 397.615 li
6.486 397.615 li
9.87 403.392 li
13.29 397.615 li
cp
f
20.9224 410.701 mo
15.8284 410.701 li
15.8284 409.369 li
17.5024 409.369 li
17.5024 398.947 li
15.8284 398.947 li
15.8284 397.615 li
20.9224 397.615 li
20.9224 398.947 li
19.2484 398.947 li
19.2484 409.369 li
20.9224 409.369 li
cp
f
25.0254 374.618 mo
29.0254 374.618 li
@
913.64 374.618 mo
909.64 374.618 li
@
15.2539 381.165 mo
6.1099 381.165 li
6.1099 379.545 li
13.1119 369.627 li
6.4339 369.627 li
6.4339 368.079 li
15.0739 368.079 li
15.0739 369.645 li
7.9999 379.617 li
15.2539 379.617 li
cp
f
21.5537 381.165 mo
16.4597 381.165 li
16.4597 379.833 li
18.1337 379.833 li
18.1337 369.411 li
16.4597 369.411 li
16.4597 368.079 li
21.5537 368.079 li
21.5537 369.411 li
19.8797 369.411 li
19.8797 379.833 li
21.5537 379.833 li
cp
f
25.0254 345.083 mo
29.0254 345.083 li
@
913.64 345.083 mo
909.64 345.083 li
@
10.6479 351.629 mo
5.5539 351.629 li
5.5539 350.298 li
7.2279 350.298 li
7.2279 339.875 li
5.5539 339.875 li
5.5539 338.543 li
10.6479 338.543 li
10.6479 339.875 li
8.9739 339.875 li
8.9739 350.298 li
10.6479 350.298 li
cp
f
21.8438 351.629 mo
19.8458 351.629 li
16.6598 346.392 li
13.4018 351.629 li
11.5298 351.629 li
15.6878 345.078 li
11.6558 338.543 li
13.6358 338.543 li
16.7678 343.691 li
19.9358 338.543 li
21.8258 338.543 li
17.7398 344.987 li
cp
f
25.0254 315.547 mo
29.0254 315.547 li
@
913.64 315.547 mo
909.64 315.547 li
@
10.5386 322.093 mo
5.4446 322.093 li
5.4446 320.761 li
7.1186 320.761 li
7.1186 310.339 li
5.4446 310.339 li
5.4446 309.007 li
10.5386 309.007 li
10.5386 310.339 li
8.8646 310.339 li
8.8646 320.761 li
10.5386 320.761 li
cp
f
21.8428 309.008 mo
17.4148 316.298 li
17.4148 322.094 li
15.6688 322.094 li
15.6688 316.479 li
11.2768 309.008 li
13.1848 309.008 li
16.5688 314.785 li
19.9888 309.008 li
cp
f
25.0254 286.011 mo
29.0254 286.011 li
@
913.64 286.011 mo
909.64 286.011 li
@
11.3511 292.558 mo
6.2571 292.558 li
6.2571 291.226 li
7.9311 291.226 li
7.9311 280.804 li
6.2571 280.804 li
6.2571 279.472 li
11.3511 279.472 li
11.3511 280.804 li
9.6771 280.804 li
9.6771 291.226 li
11.3511 291.226 li
cp
f
21.8271 292.558 mo
12.6831 292.558 li
12.6831 290.938 li
19.6851 281.02 li
13.0071 281.02 li
13.0071 279.472 li
21.6471 279.472 li
21.6471 281.037 li
14.5731 291.01 li
21.8271 291.01 li
cp
f
25.0254 256.475 mo
29.0254 256.475 li
@
913.64 256.475 mo
909.64 256.475 li
@
10.6611 263.022 mo
8.6631 263.022 li
5.4771 257.785 li
2.2191 263.022 li
.3471 263.022 li
4.5051 256.47 li
.473101 249.936 li
2.4531 249.936 li
5.5851 255.084 li
8.7531 249.936 li
10.6431 249.936 li
6.5571 256.38 li
cp
f
21.1191 263.022 mo
19.1211 263.022 li
15.9351 257.785 li
12.6771 263.022 li
10.8051 263.022 li
14.9631 256.47 li
10.9311 249.936 li
12.9111 249.936 li
16.0431 255.084 li
19.2111 249.936 li
21.1011 249.936 li
17.0151 256.38 li
cp
f
25.0254 226.94 mo
29.0254 226.94 li
@
913.64 226.94 mo
909.64 226.94 li
@
10.5518 233.487 mo
8.5538 233.487 li
5.3678 228.249 li
2.1098 233.487 li
.2378 233.487 li
4.3958 226.935 li
.3638 220.401 li
2.3438 220.401 li
5.4758 225.549 li
8.6438 220.401 li
10.5338 220.401 li
6.4478 226.845 li
cp
f
21.1177 220.401 mo
16.6897 227.691 li
16.6897 233.487 li
14.9437 233.487 li
14.9437 227.871 li
10.5517 220.401 li
12.4597 220.401 li
15.8437 226.179 li
19.2637 220.401 li
cp
f
25.0254 197.404 mo
29.0254 197.404 li
@
913.64 197.404 mo
909.64 197.404 li
@
11.3643 203.951 mo
9.3663 203.951 li
6.1803 198.713 li
2.9223 203.951 li
1.0503 203.951 li
5.2083 197.399 li
1.1763 190.865 li
3.1563 190.865 li
6.2883 196.013 li
9.4563 190.865 li
11.3463 190.865 li
7.2603 197.309 li
cp
f
21.1021 203.951 mo
11.9581 203.951 li
11.9581 202.331 li
18.9601 192.413 li
12.2821 192.413 li
12.2821 190.865 li
20.9221 190.865 li
20.9221 192.431 li
13.8481 202.403 li
21.1021 202.403 li
cp
f
25.0254 167.869 mo
29.0254 167.869 li
@
913.64 167.869 mo
909.64 167.869 li
@
10.6753 161.329 mo
6.2473 168.619 li
6.2473 174.415 li
4.5013 174.415 li
4.5013 168.799 li
.1093 161.329 li
2.0173 161.329 li
5.4013 167.107 li
8.8213 161.329 li
cp
f
20.9355 174.416 mo
18.9375 174.416 li
15.7515 169.178 li
12.4935 174.416 li
10.6215 174.416 li
14.7795 167.864 li
10.7475 161.33 li
12.7275 161.33 li
15.8595 166.478 li
19.0275 161.33 li
20.9175 161.33 li
16.8315 167.774 li
cp
f
25.0254 138.333 mo
29.0254 138.333 li
@
913.64 138.333 mo
909.64 138.333 li
@
10.5659 131.794 mo
6.1379 139.084 li
6.1379 144.88 li
4.3919 144.88 li
4.3919 139.264 li
-.000100136 131.794 li
1.9079 131.794 li
5.2919 137.572 li
8.7119 131.794 li
cp
f
20.9341 131.794 mo
16.5061 139.084 li
16.5061 144.88 li
14.7601 144.88 li
14.7601 139.264 li
10.3681 131.794 li
12.2761 131.794 li
15.6601 137.572 li
19.0801 131.794 li
cp
f
25.0254 108.798 mo
29.0254 108.798 li
@
913.64 108.798 mo
909.64 108.798 li
@
11.3784 102.258 mo
6.9504 109.548 li
6.9504 115.344 li
5.2044 115.344 li
5.2044 109.728 li
.8124 102.258 li
2.7204 102.258 li
6.1044 108.036 li
9.5244 102.258 li
cp
f
20.9185 115.344 mo
11.7745 115.344 li
11.7745 113.724 li
18.7765 103.806 li
12.0985 103.806 li
12.0985 102.258 li
20.7385 102.258 li
20.7385 103.824 li
13.6645 113.796 li
20.9185 113.796 li
cp
f
25.0254 79.2614 mo
29.0254 79.2614 li
@
913.64 79.2614 mo
909.64 79.2614 li
@
10.7852 85.8082 mo
1.6412 85.8082 li
1.6412 84.1882 li
8.6432 74.2702 li
1.9652 74.2702 li
1.9652 72.7222 li
10.6052 72.7222 li
10.6052 74.2882 li
3.5312 84.2602 li
10.7852 84.2602 li
cp
f
21.5669 85.8082 mo
19.5689 85.8082 li
16.3829 80.5702 li
13.1249 85.8082 li
11.2529 85.8082 li
15.4109 79.2562 li
11.3789 72.7222 li
13.3589 72.7222 li
16.4909 77.8702 li
19.6589 72.7222 li
21.5489 72.7222 li
17.4629 79.1662 li
cp
f
25.0254 49.7262 mo
29.0254 49.7262 li
@
913.64 49.7262 mo
909.64 49.7262 li
@
10.6758 56.2731 mo
1.5318 56.2731 li
1.5318 54.6531 li
8.5338 44.7351 li
1.8558 44.7351 li
1.8558 43.1871 li
10.4958 43.1871 li
10.4958 44.7531 li
3.4218 54.7251 li
10.6758 54.7251 li
cp
f
21.5654 43.1867 mo
17.1374 50.4767 li
17.1374 56.2727 li
15.3914 56.2727 li
15.3914 50.6567 li
10.9994 43.1867 li
12.9074 43.1867 li
16.2914 48.9647 li
19.7114 43.1867 li
cp
f
25.0254 20.1901 mo
29.0254 20.1901 li
@
913.64 20.1901 mo
909.64 20.1901 li
@
11.6133 26.737 mo
2.4693 26.737 li
2.4693 25.117 li
9.4713 15.199 li
2.7933 15.199 li
2.7933 13.651 li
11.4333 13.651 li
11.4333 15.217 li
4.3593 25.189 li
11.6133 25.189 li
cp
f
21.6753 26.737 mo
12.5313 26.737 li
12.5313 25.117 li
19.5333 15.199 li
12.8553 15.199 li
12.8553 13.651 li
21.4953 13.651 li
21.4953 15.217 li
14.4213 25.189 li
21.6753 25.189 li
cp
f
1 lw
2 lc
25.0254 .499695 mo
913.639 .499695 li
@
913.64 453.379 mo
913.64 .499512 li
@
25.0254 453.379 mo
913.639 453.379 li
@
25.0254 453.379 mo
25.0254 .499512 li
@
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
